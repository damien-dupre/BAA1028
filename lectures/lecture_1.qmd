---
title: "Lecture 1: Introduction to ePortfolios"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupré
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
---

```{r setup, include = FALSE}
# libraries --------------------------------------------------------------------
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)
```

## Module Contact Details

::: columns
::: {.column width="50%"}
### Damien Dupré, PhD

- email: damien.dupre@dcu.ie
- phone: 00353 (0)1 700 6360
- office: Q233 DCU Business School
:::

::: {.column width="40%"}
```{r}
include_graphics("https://pbs.twimg.com/profile_images/1221820283159490565/96a3XnSg_400x400.jpg")
```
:::
:::

## Module Content

:::: {layout="[1,1]"}
::: {#first-column}
### Knowledge

- ePortfolio
- Project Organisation

### Skills

- bash/zsh
- Git & GitHub
- Quarto
- Markdown & HTML
- Jupyter
:::

::: {#second-column}
### Slides

Available on the module's loop page and, more importantly, online at:

[https://damien-dupre.github.io -> courses -> BAA1028](https://damien-dupre.github.io/courses/details/BAA1028)
:::
::::

## What About You?

::: incremental
- Who is using Microsoft OS, Mac Os, or Linux?
- Who has already an account on GitHub, GitLab, or equivalent?
- Who has a personal website on WordPress, Google Site, or equivalent?
- Who knows how to read and write .html files?
- Which coding platform are you currently using to code: Spyder, JupyterLab, Jupyter Notebook, PyCharm, VS Code, Neovim, RStudio, Atom, Positron, other?
- Who knows what Quarto is?
- Who knows what bash/zsh is?
- Do you know where is your Notepad (Windows) or TextEdit (MacOS)?
:::

## Module Assessment

### 90% ePortfolio

Website that showcases your coding skills, achievements, experiences, and personal reflections. It should include various media types—documents, images, videos, audio clips, presentations, and web links—that can be tailored for different audiences. **Deadline: April 13, 2025**

### 10% Kubicle Courses

  - [Data Presentation Skills: Communicating Data Effectively](https://app.kubicle.com/learn/data-presentation-skills/overview-of-data-communication)<br>
  - [Data Presentation Skills: Telling Stories with Data](https://app.kubicle.com/learn/data-presentation-skills/a-storytelling-structure)<br>
  - [Data Presentation Skills: Presenting Your Data](https://app.kubicle.com/learn/data-presentation-skills/overview-of-data-presentation)<br>
  - [Data Security: Keeping Your Information Safe](https://app.kubicle.com/learn/data-security/introduction-to-information-security)<br>
  - [Data Security: Handling Data Securely and Responsibly](https://app.kubicle.com/learn/data-security/introduction-to-security-protocols)
  
## Creating an ePortfolio

```{r}
include_img("workflow.png")
```

## ePortfolio Example 1

```{=html}
<iframe width="1000" height="500" src="https://alanlynch94.github.io/My-Website/"></iframe>
```

- [`r fa(name = "globe")` https://alanlynch94.github.io/My-Website](https://alanlynch94.github.io/My-Website)
- [`r fa(name = "github")` https://github.com/AlanLynch94/My-Website](https://github.com/AlanLynch94/My-Website)

## ePortfolio Example 2

```{=html}
<iframe width="1000" height="500" src="https://jeff-bow.github.io/"></iframe>
```

- [`r fa(name = "globe")` https://jeff-bow.github.io/](https://jeff-bow.github.io/)
- [`r fa(name = "github")` https://github.com/jeff-bow/jeff-bow.github.io](https://github.com/jeff-bow/jeff-bow.github.io)

## ePortfolio Example 3

```{=html}
<iframe width="1000" height="500" src="https://liam-mcgovern23.github.io/Portfolio3.0/"></iframe>
```

- [`r fa(name = "globe")` https://liam-mcgovern23.github.io/Portfolio3.0/](https://liam-mcgovern23.github.io/Portfolio3.0/)
- [`r fa(name = "github")` https://github.com/liam-mcgovern23/Portfolio3.0](https://github.com/liam-mcgovern23/Portfolio3.0)

## ePortfolio Example 4

```{=html}
<iframe width="1000" height="500" src="https://beris00.github.io/"></iframe>
```

- [`r fa(name = "globe")` https://beris00.github.io/](https://beris00.github.io/)
- [`r fa(name = "github")` https://github.com/beris00/beris00.github.io](https://github.com/beris00/beris00.github.io)

<!-- ## ePortfolio Example 5 -->

<!-- ```{=html} -->
<!-- <iframe width="1000" height="500" src="https://wackerdam.github.io/"></iframe> -->
<!-- ``` -->

<!-- - [`r fa(name = "globe")` https://wackerdam.github.io/](https://wackerdam.github.io/) -->
<!-- - [`r fa(name = "github")` https://github.com/wackerdam/wackerdam.github.io](https://github.com/wackerdam/wackerdam.github.io) -->

## ePortfolio Example 5

```{=html}
<iframe width="1000" height="500" src="https://laurenmcconnel.github.io/Business_Analytics_Portfolio/"></iframe>
```

- [`r fa(name = "globe")` https://laurenmcconnel.github.io/Business_Analytics_Portfolio/](https://laurenmcconnel.github.io/Business_Analytics_Portfolio/)
- [`r fa(name = "github")` https://github.com/laurenmcconnel/Business_Analytics_Portfolio](https://github.com/laurenmcconnel/Business_Analytics_Portfolio)

## ePortfolio Example 6

```{=html}
<iframe width="1000" height="500" src="https://kellie-staunton.github.io/E-Portfolio/"></iframe>
```

- [`r fa(name = "globe")` https://kellie-staunton.github.io/E-Portfolio/](https://kellie-staunton.github.io/E-Portfolio/)
- [`r fa(name = "github")` https://github.com/kellie-staunton/E-Portfolio](https://github.com/kellie-staunton/E-Portfolio)

## ePortfolio Example 7

```{=html}
<iframe width="1000" height="500" src="https://chstefan.github.io/Data_Analytics_Website/"></iframe>
```

- [`r fa(name = "globe")` https://chstefan.github.io/Data_Analytics_Website/](https://chstefan.github.io/Data_Analytics_Website/)
- [`r fa(name = "github")` https://github.com/chstefan/Data_Analytics_Website](https://github.com/chstefan/Data_Analytics_Website)

## ePortfolio Example 8

```{=html}
<iframe width="1000" height="500" src="https://lclehr.github.io/MT412/"></iframe>
```

- [`r fa(name = "globe")` https://lclehr.github.io/MT412/](https://lclehr.github.io/MT412/)
- [`r fa(name = "github")` https://github.com/lclehr/MT412](https://github.com/lclehr/MT412)

## ePortfolio Example 9

```{=html}
<iframe width="1000" height="500" src="https://jhowardinho45.github.io/jameshoward.github.io/"></iframe>
```

- [`r fa(name = "globe")` https://jhowardinho45.github.io/jameshoward.github.io/](https://jhowardinho45.github.io/jameshoward.github.io/)
- [`r fa(name = "github")` https://github.com/jhowardinho45/jameshoward.github.io](https://github.com/jhowardinho45/jameshoward.github.io)

## ePortfolio Example 10

```{=html}
<iframe width="1000" height="500" src="https://chloed77.github.io/MT412---E-Portfolio---Chloe-Downes/"></iframe>
```

- [`r fa(name = "globe")` https://chloed77.github.io/MT412---E-Portfolio---Chloe-Downes/](https://chloed77.github.io/MT412---E-Portfolio---Chloe-Downes/)
- [`r fa(name = "github")` https://github.com/chloed77/MT412---E-Portfolio---Chloe-Downes/](https://github.com/chloed77/MT412---E-Portfolio---Chloe-Downes/)

## ePortfolio Example 11

```{=html}
<iframe width="1000" height="500" src="https://catalinbondari.github.io/eportfolio-website/"></iframe>
```

- [`r fa(name = "globe")` https://catalinbondari.github.io/eportfolio-website/](https://catalinbondari.github.io/eportfolio-website/)
- [`r fa(name = "github")` https://github.com/catalinbondari/eportfolio-website](https://github.com/catalinbondari/eportfolio-website)

## ePortfolio Example 12

```{=html}
<iframe width="1000" height="500" src="https://cianshannon.github.io/cian-shannon/"></iframe>
```

- [`r fa(name = "globe")` https://cianshannon.github.io/cian-shannon/](https://cianshannon.github.io/cian-shannon/)
- [`r fa(name = "github")` https://github.com/cianshannon/cian-shannon](https://github.com/cianshannon/cian-shannon)

# What is an ePortfolio?

## Definition

- An ePortfolio is a digital collection of materials that showcases an individual’s achievements, skills, experiences, and learning.
- It serves as both a personal and professional development tool.
-	Combines multimedia elements (text, images, videos, etc.) to enhance presentation.

### ePortfolio are also about what you don't include

- Quality over quantity! Don't throw in every student project
- Avoid sharing irrelevant information like data cleaning (just link to the file with the code) or personal information like phone number
- Check for grammar errors/clarity

## ePortfolio Platforms

- [Google Sites](https://sites.google.com): Free and user-friendly while having limited design options.
- [Canva](https://www.canva.com/en_gb/): Visually appealing templates.
- [WordPress](https://wordpress.com/): Customisable and scalable website for diverse purpose.
- [Loop Reflect/Mahara](https://www.dcu.ie/teu/learning-eportfolios): Designed for education and collaboration.
- [LinkedIn](https://www.linkedin.com/pulse/linkedin-portfolio-step-by-step-guide-showcase-your-work): Professional networking with portfolio integration.

...Just to name a few.

These services offer a **platform to design an eportfolio/website** and to **host the eportfolio/website on their own servers**.

Instead, we are going to **manually create** our eportfolio/website and to **host it on a specific server**.

## ePortfolio Requirements {.smaller}

:::: {layout="[1,1]"}
::: {#first-column}
### Technical Features

- Published with **GitHub Pages**
- Use of **Git** to upload files rather manual upload
- Use of **Quarto** rather than manual html pages
- **Active code** rather than inactive code (e.g., screenshots)
- **Tidy project** folder organisation
- **Careful use of data**, both databases and personal data
:::

::: {#second-column}
### Components

- **Introduction:** About me/profile section.
- **Evidence of Work**: Projects, assignments, and achievements.
- **Reflection**: Insights on learning experiences.
- **References/Contact**: Networks and accessibility details.
- **CV**: Link to pdf accessible document.
:::
::::

### Additional Criteria
**Overall design**, **attention to details**, and **innovation**.

## Plagiarism {background="#43464B"}

<br>

### Do `NOT` copy other students work

<br>

### Do `NOT` copy code online without reference

<br>

### Do `NOT` use full code templates

## Exercise 1: Type of Files in an ePortfolio {background="#43464B"}

1. Go to the GitHub Repository of one of the portfolio presented earlier,
2. Download and unZip this repository on your own Computer,
3. List all the file extensions of documents included in this folder and subfolders.

```{r}
countdown(minutes = 5, warn_when = 60)
```

## Exercise 1: Type of Files in an ePortfolio {background="#43464B" .smaller}

Which file `extensions` have you found?

::: {.fragment .fade-up}
::: columns
::: {.column width="30%"}
Web and Interactive Content

	•	.html / .htm: HyperText Markup Language files for web content.
	•	.css: Cascading Style Sheets for web design.
	•	.js: JavaScript files for interactive elements.

Text and Document Formats

	•	.doc / .docx: Microsoft Word documents.
	•	.pdf: Portable Document Format, widely used for static, professional documents.
	•	.txt: Plain text files.
	•	.rtf: Rich Text Format, compatible with various word processors.
	•	.odt: OpenDocument Text, used by open-source tools like LibreOffice.

Presentation Formats

	•	.ppt / .pptx: Microsoft PowerPoint presentations.
	•	.odp: OpenDocument Presentation format.
	•	.key: Apple Keynote presentations.
:::
::: {.column width="30%"}
Spreadsheet Formats

	•	.xls / .xlsx: Microsoft Excel spreadsheets.
	•	.csv: Comma-separated values, often used for data sharing.
	•	.ods: OpenDocument Spreadsheet format.

Image Formats

	•	.jpg / .jpeg: Compressed image files.
	•	.png: High-quality image files supporting transparency.
	•	.gif: Animated or static image files.
	•	.bmp: Bitmap image files.
	•	.tiff / .tif: High-resolution image files.
	•	.webp: Compressed image format for the web.
	•	.ico: Icon image files, often used for branding or UI mockups.
	•	.heic: High Efficiency Image Format, used in modern Apple devices.
	•	.svgz: Compressed Scalable Vector Graphics.
	•	.raw: Camera raw image files from DSLRs.
:::
::: {.column width="30%"}
Audio Formats

	•	.mp3: Compressed audio files.
	•	.wav: High-quality audio files.
	•	.ogg: Open-source audio file format.

Video Formats

	•	.mp4: A widely-used video format compatible with most devices.
	•	.avi: Video format with higher quality, but larger file size.
	•	.mov: Apple QuickTime video format.
	•	.wmv: Windows Media Video format.

Other Formats

	•	.svg: Scalable Vector Graphics, ideal for logos and illustrations.
	•	.md: Markdown files, often used in coding or minimalist documentation.
	•	.log: Log files for tracking progress or issues.
	•	.yml / .yaml: Data serialisation formats, often for configuration files.
	•	.zip / .tar.gz / .7z: Compressed archive formats for distributing multiple files.
	•	.dat: Generic data files.
:::
:::
:::

# Keep your Projects Tidy

## Project Organisation

Keep your projects tidy: 1 folder per projects and all the projects folders in 1 "project" folder.

## Exercise 2: Create your "project" folder  {background="#43464B"}

1. Go to the root/home of your computer using your file explorer
2. Create a "Project" folder
3. In this "Project" folder, create a folder called "my_first_project"
4. Print the path of "my_first_project" folder

```{r}
countdown(minutes = 5, warn_when = 60)
```

## Project Management

Why do we care about project management?

<br>

:::: {layout="[1,1]"}
::: {#first-column}
### Portability
The ability to move the project without breaking code or needing adapting

- you will change computers
- you will reorganise your file structure
- you will share your code with others
:::

::: {#second-column}
### Reproducibility
The ability to rerun the entire process from scratch

- not just for reviews
- not just for best-practice analytics
- also for future (or even present) you
- and for your collaborators/helpers
:::
::::

## Project Workflows

:::: {layout="[1,1]"}
::: {#first-column}
### Portability
- All necessary files should be contained in the project and referenced relatively
- All necessary outputs are created by code in the project and stored in the project
:::

::: {#second-column}
### Reproducibility
- All code can be run in fresh sessions and produce the same output
- Does not force other users to alter their own work setup
:::
::::

## What is a path?

> A path is a string of characters used to uniquely identify a location in a
directory structure. It is composed by following the directory tree hierarchy in which components, separated by a delimiting character, represent each directory.

> The **delimiting character** is most commonly the **slash ("/")**, the
**backslash character ("\\")**, or colon (":"), though some operating systems
may use a different delimiter. 

> Resources can be represented by either **absolute or relative paths**

See [https://en.wikipedia.org/wiki/Path_(computing)](https://en.wikipedia.org/wiki/Path_(computing))

## Delimiting characters

Delimiting characters `/` or `\` vary by operating system

- MS Windows: 
  - Use a colon `:` to specify the drive name (e.g., `c:`, `d:`, `e:`)
  - Folders and files are seperated by a backslash character (`\`)
  - Example: `J:\Work\PARI\PARI-F\data\pari-f_data_v0-1.dta`

- Linux/macOS:
  - No colon (`:`)
  - Use only the slash (`/`) character
  - Example: `/E/syncwork/projects/confer/ps2021-10-ws-repro-research`
  
## Delimiting characters

- Software, such as R, $\LaTeX$, and Python, with a Linux/UNIX background behaves differently under MS Windows when it comes to specifying file/folder paths

- That is, when specifying a path (e.g., in R or $\LaTeX$) in MS Windows, these programs do not like the backslash character (`\`) (the backslash is used for "escaping" other characters)

## Delimiting characters

Two solutions in MS Windows:

1. Use the slash character `/` instead of `\`, e.g.:   

```python
import pandas
csv_file = pandas.read_csv('C:/Damien/myfolder/mysubfolder/mydata.csv')
```

2. Escape the backslash character via `\\`, e.g.:

```python
import pandas
csv_file = pandas.read_csv('C:\\Damien\\myfolder\\mysubfolder\\mydata.csv')
```

## Delimiting characters

Note: Many programming languages/statistical packages (R, Python, ...) can
dynamically create a full path that follows the rules of the respective
operating system

```python
import os
os.path.join("e:", "folder1", "folder2", "file")
```
returns: `'e:folder1\\folder2\\file'` (in Windows)

A handy tool when working on both operating system: [Path
Copy Copy -- Copy file paths from Windows explorer's contextual
menu](https://pathcopycopy.github.io/)

Mac users can left-click and press <kbd>option</kbd> to "copy as a Pathname"

## Relative vs. Absolute Paths

An absolute path specifies a file or directory location from the root directory.

Examples:

- **Mac/Linux:**
```bash
/Users/username/Documents/file.txt
```
- **Windows:**
```bash
C:\Users\Username\Documents\file.txt
```

## Relative vs. Absolute Paths

A relative path specifies a location relative to the current directory which is a "fixed location" on your computer

Often, this "fixed location" is the so-called "working directory" 

- The dot `.` denotes the current working directory
- The dot dot `..` denotes the parent directory, i.e., it points upwards in the folder hierarchy
- Finally, the tilde symbol `~` will bring you back to your home directory, e.g. `cd ~`

Examples:
```bash
subfolder/file.txt  # Inside a subfolder
./file.txt       # Current directory
../file.txt      # Parent directory
```

Works differently based on where the command is run.

## Relative vs. Absolute Paths

So, let's assume the project "PARI-F" is located on drive `J:`, the full
absolute path is `J:\Work\PARI\PARI-F`

- The content of the project's folder `PARI-F` is:
```
.
|-- analysis
|-- data
|-- doc
|-- pari-f.stpr
`-- report
```

## Relative vs. Absolute Paths

All other file- or folder-related operations are defined relative to this working directory

**The huge benefit: when you share your project with a colleague or move it to
a new computer, you only have to define the working directory once, everything
else should work flawelessly**

How to define a working directory?

`import os; os.chdir("full-path-to-working-directory")`

How to get information about the current working directory?

`import os; os.getcwd()` (cwd = current working directory); see below for an example

```python
import os 
os.getcwd()
```

## Checking Your Current Directory 

From a terminal/command line:

- **Mac/Linux:**
  ```bash
  pwd
  ```
- **Windows (Git Bash or WSL):**
  ```bash
  pwd
  ```
- **Windows (Command Prompt):**
  ```cmd
  cd
  ```

## Navigating with Paths

- Moving between directories:
  ```bash
  cd /absolute/path  # Go to absolute path is always correct
  cd relative/path   # Move to relative path only if the path exists
  ```
- Special notations:
  - `.` (current directory)
  - `..` (parent directory)

## Practical Examples

- Moving into a subdirectory:
  ```bash
  cd Documents/Projects
  ```
- Moving up one level:
  ```bash
  cd ..
  ```
- Accessing a file in a parent directory:
  ```bash
  cat ../notes.txt
  ```
  
See here for [more examples](https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/work-with-files-directories-paths-in-python)

## Portability

In your code, do not use:

```python
import os
os.chdir('/path/to/your/directory')
```

Prefer:

```bash
#| eval: false
# pip
python -m pip install pyprojroot

# conda
conda install -c conda-forge pyprojroot
```

Then: 

```python
from pyprojroot.here import here

here()
```

## Portability

What’s wrong with `os.chdir('/path/to/your/directory')`?

- It will only ever work for the user creating the file

- It is not portable
  - Moving the folder/file will break the code
  - Collaborators will need to change any setwd path

- Increases likelihood that work from other processes leaks into current work

## Portability

The `pyprojroot` library:

If all files are contained in the project folder reference files with the here() function from the `pyprojroot` library creates relative paths from project root allows several ways to indicate project root folder

```{r}
include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/here.png")
```

## Self-Contained Projects

Contains all necessary files for your project, eportfolio or any repository in general:

- data
- results
- documentation
- scripts
- images
- designs (css/sass)
- tabs/topics

## Folder/File structure

:::: {layout="[1,1]"}
::: {#first-column}

### `data`

- all raw data files, organised in meaningful ways
- never, ever write back to this folder, read only
- if using git, never commit to history, place in .gitignore

### `results`

- write all analysis etc. results to treat as disposable, can be overwritten
- may also include figures etc if wanted

### `docs`
- documentation
- Quarto files

:::

::: {#second-column}

### `src` or `py`
- if you write functions that are used in several places
- this is the standard python folder for keeping these files that might be called in python scripts

### `scripts/analysis`
- files with full analysis pipelines
- might have source calls to files in python

:::
::::

## Folder/File structure

### `README.md`
- markdown file describing the project content and intent
- maybe also explains which files to look in for what
- ideal to have if saving the folder to github

### `LICENCE`
- dictates how code can be reused
- not covering that in this series, ask me at need

## File Naming

Organising files in data/, results/, docs/, and scripts/ require some ideas of how to name files for:

- easy machine reading
- easy human reading
- easy understanding of file content
- choosing the correct type of file to store

If you are using the py/ folder to store python-functions, these might need somewhat different naming conventions than the other folders, as these are functions you can use across the other files.

Here, naming should be particularly thought in terms of content rather than structural organisation.

## File Naming

An important part of project management, code automation, and data analytics in general is to have your files read by a piece of code or software.

Machines are clever, but extremely pedantic.

Be consistent, be meticulous.

Some machines are more clever than others, so name files in a way that the "dumbest" of them can deal with.

## File Naming

- Don't use white space
  - decide on a separator and use consistently
  - recommend the dash -
- Use small case letters
  - certain machines care about capitalization
- Use numbers smartly
  - numbers are awesome to use and can help organise files meaningfully
  - but needs some thinking about before implementing
  
## File Naming

**Naming** - variables and filenames should have meaningful names in *`snake_case`* format, preferring all lower case.

```{r}
knitr::include_graphics("https://raw.githubusercontent.com/Public-Health-Scotland/python-training/1b2302fdf8c6a57e2782e9ed96d613afd40e047c/images/r_coding_cases.png")
```

## File Naming

:::: {layout="[1,1]"}
::: {#first-column}

Machines will first list files starting with numbers (ascdendingly) then in alphabetic order.

```markdown
1_file.txt
2_file.txt
file_one.txt
file_three.txt
file_two.txt
```

But they wont understand the difference between 1 and 10

```markdown
10_file.txt
1_file.txt
2_file.txt
file_1.txt
file_10.txt
file_2.txt
```

:::

::: {#second-column .fragment}

'zero-padding' is a way of preserving file order

```markdown
01_file.txt
02_file.txt
10_file.txt
file_01.txt
file_02.txt
file_10.txt
```

:::
::::

## File Naming

Using dates in file names may also ensure decent organisation but be consistent. Recommend using YYYY-MM-DD formatting

```markdown
13-11-21_initial-submission-results.txt
22-01-03_revised-results.txt
2022-02-28_results.txt
```

vs

```markdown
2021-11-13_initial-submission-results.txt
2022-02-28_results.txt
2022-03-01_revised-results.txt
```

## File Naming

Consider using different space separators for different parts of the file name

This way you can use the file name it self, programatically, if needed

```markdown
2021-11-13_initial_submission_results.txt
2022-02-28_results.txt
2022-03-01_revised_results.txt
```

## File Naming

Optimising file names for computers is great, but ultimately its us humans that need to choose files to work with. Naming files in a way that makes the file content obvious (or at least give an idea of content) by the file name is good for such interactions. 

```markdown
2021-11-13_final-results.txt
2022-02-28_finalfinal-results.txt
2022-03-01_finished-results.txt
```

vs.

```markdown
2021-11-13_first-submission-results.txt
2022-02-28_revision-round1-results.txt
2022-03-01_revision-round2-results.txt
2022-03-01_revision-round2-no-sex-results.txt
```

## Image Types

Images from plots should use png or svg

- .png supports transparency and has no quality loss upon re-saving

- .svg can rescale to infinity without getting grainy

- .jpg best for photos, quality loss on rescale, blurry edges and poor text rendering

Images can also some times be saved in pdf, but pdf while a vector format, cannot support transparency.

Tiff has fallen out of favour due to high file sizes, but are preferable to jpeg for photos.

## References

Huge thanks the following people who have generated and shared most of the content of this lecture:

- Athanasia Monika Mowinckel: [Mind your data - Creating Organised Research Projects](https://drmowinckels.io/talks_repo/slides/2023.03.28-promenta-fileorg/)

- Bernd Weiß: [Tools and Workflows for Reproducible Research in the Quantitative Social Sciences - Computer Literacy](https://jobreu.github.io/reproducible-research-gesis-2022/slides/comp-literacy.html#1)

<br>

```{r}
#| fig-align: "center"
knitr::include_graphics("https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdGdyMnhseGczY3NheHU1cHhtdGRzdWRxaXJ1Z3BsdWF6MWdwZm84ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3ohs7JG6cq7EWesFcQ/giphy.gif")
```

## {background="#43464B"}

```{css, echo = FALSE}
img.circle {border-radius:50%;}
```

::: {layout-ncol="2"}
<img class="circle" src="https://github.com/damien-dupre.png" />

**Thanks for your attention and don't hesitate to ask if you have any questions!**  
[`r fa(name = "mastodon")` @damien_dupre](https://datasci.social/@damien_dupre)  
[`r fa(name = "github")` @damien-dupre](https://github.com/damien-dupre)  
[`r fa(name = "link")` https://damien-dupre.github.io](https://damien-dupre.github.io)  
[`r fa(name = "paper-plane")` damien.dupre@dcu.ie](mailto:damien.dupre@dcu.ie)
:::

