---
title: "Lecture 6: Quarto for Website Creation"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupré
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
knitr: 
  opts_chunk:
    fig.align: center
---

```{r setup, include = FALSE}
# libraries --------------------------------------------------------------------
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)

# functions --------------------------------------------------------------------
include_img <- function(img_name) {
  paste0("https://raw.githubusercontent.com/damien-dupre/img/main/", img_name) |> 
  knitr::include_graphics()
}
```

## For Today

#### Requirements:

- ✅ Having Git Installed and its Config done
- ✅ Having VS Code Installed with all required Extensions installed
- ✅ Having Quarto Installed and Properly Working
- ✅ GitHub Account Created

#### Programme

1. Creating your Quarto Website
2. Push it to GitHub 
3. Activating GitHub Pages

### Any questions?

# Create a website with Markdown and Python Code embedded

## Quarto Websites

Quarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.

Website navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.

```{r}
include_graphics("https://www.paulbarrs.com/wp-content/uploads/2017/09/painful.jpg")
```

## Exercise 1: Quarto Website {background="#43464B"}

1. Open VS Code, open a new Terminal window in VS Code and run the following instructions:

```{.bash filename="Terminal"}
cd ~
mkdir Project
cd Project
```

2. Create a new Quarto website from the same terminal by using your GitHub username + .github.io (e.g. damien-dupre.github.io):

```{.bash filename="Terminal"}
quarto create project website your-github-username.github.io
```

When asked for the name of your website, use your name (e.g. Damien Dupré), and then:

```{.bash filename="Terminal"}
quarto preview
```

```{r}
countdown(minutes = 5, warn_when = 60)
```

## Quarto Websites

```{.bash filename="Terminal"}
quarto create project website your-github-username.github.io
```

Creates a new website project from the Terminal. This website project is initiated by a folder called `your-github-username.github.io` located on the root of your terminal.

The folder contains only 4 files:

- `_quarto.yml` is a yaml file, it design the overall style and the navbar
- `index.qmd` is a quarto file, it corresponds to the homepage
- `about.qmd` is another quarto file which is displayed when about is clicked on the navbar
- `styles.css` is for additional style not defined in `_quarto.yml`

## Quarto Websites

Improve your Website:

- Navigation instructions here: [https://quarto.org/docs/websites/website-navigation.html](https://quarto.org/docs/websites/website-navigation.html)
- Option instructions here: [https://quarto.org/docs/reference/projects/websites.html](https://quarto.org/docs/reference/projects/websites.html)

## Quarto Websites

```{.bash filename="Terminal"}
quarto preview
```

This command is used to render the website by converting all the `.qmd` files to `.html` files stored in a `_site` folder. 

The website preview will open in a new web browser. As you edit and save `index.qmd` (or other files like `about.qmd`) the preview is automatically updated.

```{r}
include_graphics("https://ucsb-meds.github.io/creating-quarto-websites/media/rendered_site.png")
```

## .qmd Files

Unfortunately `.ipynb` files cannot be used to build a website. 

Thankfully they can be converted to `.qmd` format by quarto with the instruction: 

```{.bash filename="Terminal"}
quarto convert myfile.ipynb
```

`.qmd` files are actually very similar to `.ipynb` files and are tailored for quarto:

- They have a yaml displayed between two series of `---` signs
- They have markdown text
- They can have code cell, also called chunks

## .qmd Files

Chunks are delimited by 3 backticks on each end ` ``` ` followed by the engine (`python`) between curly braces `{python}` 

````markdown
```{{python}}
print('Hello, world!')
```
````

## Exercise 2: Convert a Notebook to .qmd {background="#43464B"}

:::: {layout="[1,1]"}
::: {#first-column}
1. Open a new Terminal window in VS Code and run the following instructions:

```{.bash filename="Terminal"}
quarto convert hello.ipynb
```

2. Drag and drop the file `hello.qmd` created in the root of the `your-github-username.github.io` folder
:::

::: {#second-column}
3. Open the file `_quarto.yml` in Jupyter and modify it as follow:

```{.yml filename="_quarto.yml"}
website:
  title: "Damien Dupré"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd
      - hello.qmd
```

4. In the same Terminal window, run the following instructions:

```{.bash filename="Terminal"}
quarto preview
```
:::
::::


```{r}
countdown(minutes = 10, warn_when = 60)
```

# Publish this website on GitHub

## Overview

There are three ways to publish Quarto websites and documents to GitHub Pages:

- **Render sites on your local machine to the docs directory**, check the rendered site into GitHub, and then configure your GitHub repo to publish from the docs directory.

- **Use the quarto publish command** to publish content rendered on your local machine.

- **Use a GitHub Action** to automatically render your files (a single Quarto document or a Quarto project) and publish the resulting content whenever you push a source code change to your repository.

#### The simplest way to publish using GitHub Pages is to render to the docs directory and then upload that directory into your repository...

## Overview

#### ... but it won't be as easy as it looks I'm afraid!

```{r out.width='90%'}
include_graphics("http://techrights.org/wp-content/uploads/2021/10/github-dark-side.jpg")
```

## Render the Website docs Folder

In the `_quarto.yml` file, simply **change the output directory folder** to a folder named `docs` as follow:

```{.yml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs
```

Then preview or render the website:

:::: {layout="[1,1]"}
::: {#first-column}
```{.bash filename="Terminal"}
quarto render
```
:::

::: {#second-column}
```{.bash filename="Terminal"}
quarto preview
```
:::
::::

## Render the Website docs Folder

Your website default folder should look like that

```{r out.width='80%'}
include_img("mysite_docs.png")
```

Note: the old folder `_site` will not be used any more and is now useless.

## Add a .nojekyll File

Add a `.nojekyll` file to the root of your repository that tells GitHub Pages not to do additional processing of your published site using Jekyll (the GitHub default site generation tool).

<!-- You can create an empty text file by yourself or you can download this `nojekyll` file here: -->
```{r}
# downloadthis::download_file(
#   path = here::here("nojekyll"),
#   output_name = "nojekyll",
#   button_label = "Click here to download nojekyll",
#   has_icon = TRUE,
#   icon = "fa fa-save",
#   self_contained = FALSE
# )
```

You can create it from the terminal when the website folder is the current directory:

```{.bash filename="Terminal"}
touch .nojekyll
```

## Upload your Files to GitHub

When GitHub suggests ways how to upload files, it gives instructions to **create a new repository on the command line** with git.

For example:

```{.bash filename="Terminal"}
cd your-github-username.github.io #if not done yet
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/your-github-username/your-github-username.github.io.git
git push -u origin main
```

You should see all your files uploaded in your GitHub repository

## Exercise 3: Your Quarto Website in GitHub  {background="#43464B"}

:::: {layout="[1,1]"}
::: {#first-column}
1. Add a .nojekyll File:

```{.bash filename="Terminal"}
touch .nojekyll
```

2. **Change the output directory folder** to a folder named `docs` in the `_quarto.yml` file:

```{.yml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs
```

Then, preview or render the website

```{.bash filename="Terminal"}
quarto render
```
:::
::: {#second-column}
3. In the `Source Control` panel, click <kbd>Initialize Repository</kbd>, add all files by clicking on <kbd>+</kbd>, add a mandatory message and click <kbd>✔️ Commit</kbd>. Finally, click <kbd>Publish Branch</kbd>

4. In **GitHub**, click **Settings** -> **Pages** choose:
  - `main` branch
  - `/docs` folder
  - and Save

:::
::::


```{r}
countdown(minutes = 10, warn_when = 60)
```

## {background="#43464B"}

```{css, echo = FALSE}
img.circle {border-radius:50%;}
```

::: {layout-ncol="2"}
<img class="circle" src="https://github.com/damien-dupre.png" />

**Thanks for your attention and don't hesitate to ask if you have any questions!**  
[`r fa(name = "mastodon")` @damien_dupre](https://datasci.social/@damien_dupre)  
[`r fa(name = "github")` @damien-dupre](https://github.com/damien-dupre)  
[`r fa(name = "link")` https://damien-dupre.github.io](https://damien-dupre.github.io)  
[`r fa(name = "paper-plane")` damien.dupre@dcu.ie](mailto:damien.dupre@dcu.ie)
:::