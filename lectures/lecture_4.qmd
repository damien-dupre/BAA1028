---
title: "Lecture 4: Git, GitHub, and Version Control"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupr√©
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
knitr: 
  opts_chunk:
    fig.align: center
---

```{r setup, include = FALSE}
# libraries --------------------------------------------------------------------
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)

# functions --------------------------------------------------------------------
include_img <- function(img_name) {
  paste0("https://raw.githubusercontent.com/damien-dupre/img/main/", img_name) |> 
  knitr::include_graphics()
}

# https://anandology.github.io/isi-fcp/ 
# https://hamishgibbs.github.io/soda_python_foundations/slides/slides_vscode_python#/title-slide
# https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-03/03-command-line.html
# https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-04/04-more-command-line.html

# https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-06/06-more-git-github.html

# https://github.com/DHI/datatalks
```

## For Today

#### 1. Look back at Lecture 3 with new slides about Absolute vs. Relative paths.

#### 2. Introduction to Command-Line Interface

#### 3. Introduction to Git

<!-- #### 4. Git from command line and from VS Code -->

<br>

### Any questions?

## Demonstration {background="#43464B"}

Here is my own workflow with Git, GitHub, R, and Rstudio!

```{r}
include_graphics("https://docs.ropensci.org/magick/reference/figures/Rlogo-banana.gif")
```

# Command-Line Interface

## What is a command-line interface (CLI)? 

> A command-line interface (CLI) **processes commands** to a computer program in the form of **lines of text**. The program which handles the interface is called a command-line interpreter or command-line processor. 

> Operating systems implement a command-line interface in a shell for interactive access to operating system functions or services. Such access was primarily provided to users by computer terminals starting in the mid-1960s, and continued to be used throughout the 1970s and 1980s on VAX/VMS, Unix systems and personal computer systems including DOS, CP/M and Apple DOS.

See [https://en.wikipedia.org/wiki/Command-line_interface](https://en.wikipedia.org/wiki/Command-line_interface)

## What is a command-line interface (CLI)? 

:::: {layout="[1,1]"}
::: {#first-column}
### Command-Line Interface
- Text-based commands.
- Efficient for automation.
- Preferred by tech experts.
:::

::: {#second-column}
### Graphical User Interface
- Visual elements (icons, windows).
- User-friendly.
- Immediate visual feedback.
- Common for everyday tasks.
:::
::::

## Evolution of Computer Interfaces

- **1969**: UNIX introduces Command Line Interface (CLI)
- **1980**: MS-DOS popularizes Command Line Interface (CLI)
- **1984**: Apple Macintosh brings GUI to mainstream
- **1985**: Microsoft introduces Windows 1.0, a graphical user interface (GUI).
- **1991**: Linux introduces CLI to open source
- **1995**: Windows 95 merges GUI and CLI
- **2001**: Mac OS X merges Unix and GUI
- **2004**: Ubuntu simplifies Linux CLI 
- **2020s**: CLI continues its indispensable role, supporting automation, scripting, and advanced tasks. 

## And what is a shell?

> In computing, a shell is a computer program which exposes an operating system's services to a human user or other program. In general, operating system shells use either a command-line interface (CLI) or graphical user interface (GUI), depending on a computer's role and particular operation. It is named a shell because it is the outermost layer around the operating system.

See [https://en.wikipedia.org/wiki/Shell_(computing)](https://en.wikipedia.org/wiki/Shell_(computing))

## Terminal vs Shell

Vocabulary:

- **Terminal**: A program that runs a shell
- **Shell**: A program that interprets commands
- **Bash**: The most common shell on Linux and macOS
- **PowerShell**: The most common shell on Windows
- **Cmd**: The legacy shell on Windows

My CLI of choice is [the Bash](https://www.gnu.org/software/bash/)

- Linux/macOS user already have access to the Bash
- MS Windows user can use the "Git Bash" after installing Git

## Windows Terminal

A new terminal application for Windows 10

![](https://raw.githubusercontent.com/DHI/datatalks/refs/heads/main/talk_22_command_line_apps/terminal.png)

## Okay, but why?!

- Fast and efficient way to interact with your computer

- Important part of your automation toolbox to create a reproducible data analysis pipeline

- Accessing a remote server almost always requires some sort of command line skills

[I also recommend "Top ten reasons to learn to use the command line: Expanding your reproducibility tools"](https://riffomonas.org/code_club/2020-08-17-command-line-life)

## Important Commands

| Description           | Win         | Linux, macOS (Bash) |
| :---                  | :---        | :---                |    
| Copy files, folders   | `copy`      | `cp`                |
| Move files, folders   | `move`      | `mv`                |
| List folder content   | `dir`       | `ls`                |
| Create new folder     | `mkdir`     | `mkdir`             |
| Change current folder | `cd`        | `cd`                |
| Show current path.    | `echo %cd%` | `pwd`               |
| Locate a software     | `where`     | `which`             |
| **Danger zone** No undo!|
| Delete file(s)         | `del`      | `rm`                |
| Delete folder(s)       | `rmdir`.   | `rm`                |

## Important Commands

Almost all of these command can have several arguments, e.g., `ls -la`

They also have subcommands, e.g., `git`

* `git init`
* `git add`
* `git commit`
* `git push`

Each subcommand has its own set of options and arguments.

- [Linux cheatsheet](https://files.fosswire.com/2007/08/fwunixref.pdf)

- [MS Windows cheatsheet](http://www.cs.columbia.edu/~sedwards/classes/2015/1102-fall/Command%20Prompt%20Cheatsheet.pdf) 

<!-- ## Exercise -->

<!-- - Start the Git Bash -->

<!-- - List the content of the current folder via `ls -la` -->

<!-- - Determine where you are via `pwd` -->

<!-- - Go to the parent folder via `cd <your input>` -->

<!-- - Copy the content from my small script (see above, section [](cli:create-project), use the little copy-icon in the top-right corner) and past it into a text file, save the text file as `create-project.sh` -->

<!-- - Execute the script `./create-project.sh` (the `./` is important, for an explanation see [here](https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-executable-or-script-name-to-run-it-in-bas)) without a folder name -->

<!-- - Execute the script `./create-project.sh <your-new-project>` with a folder name as argument -->
    
# Git

## Automated Version Control (AVC)
::: {#sec-avc}
![](https://mxochicale.github.io/intro-to-git-and-github/figures/version-control-what-is-it.png)
:::

## Automated Version Control (AVC)
- A system that automatically manages changes to files, typically in the context of software development.
- Keeps track of every modification to the code in a special kind of database.
- If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimising disruption to all team members.

## AVC: What should I care?
::: {#sec-avc-care}
![](https://mxochicale.github.io/intro-to-git-and-github/figures/version-control-what-should-i-care-A.png)
:::

## AVC: What should I care?
![](https://mxochicale.github.io/intro-to-git-and-github/figures/version-control-what-should-i-care-B.png)

## Automated Version Control
  - **Backup and restore**: Changes are stored securely and can be restored at any point.
  - **Collaboration**: Multiple people can work on the same project at the same time.
  - **Track changes**: You can see who last modified something that might be causing a problem, who introduced an issue, when it was introduced, and more.
  - **Explore alternatives**: Safely experiment with new ideas in a branch, without affecting the main project.

## Introduction to Git and GitHub
::: {#sec-gg}
- **Git**: A version control system that lets you manage and keep track of your source code history.
- **GitHub**: A cloud-based hosting service that lets you manage Git repositories.
- **Benefits**:
  - Track changes in your code across versions.
  - Collaborate with others on projects.
  - Backup your work on the cloud.
:::

## What is Git ?

> It's a **version control system**, which works like a time machine. In this time machine, it has check points which is known as **Commits** and it's unique for every check point. 

> It has a super cool feature like multiverse aka **Branching**, that lets us create an alternate version of our code. A branch is a copy of project and it's super useful when working in groups, allowing us the capability of working on with or without changing the original code. We can also synchronize the changes that happened across different branches and that's called **Merging**.

## What is a Git repository?

 - A place where you can store your code, your files, and each file's revision history.
 - Contains a `.git` folder at the root which does all the git magic behind the scenes.

## Check Git

To check if Git is already installed, run the following in the Terminal / Command Prompt:

:::: {layout="[1,1]"}
::: {#first-column}
### Linus/MacOS

```bash
which git
```

If asked to install the Xcode command line tools, say yes!
Right click to copy on a Terminal line
:::

::: {#second-column}
### Windows

```bash
where git
```
:::
::::


Check the version of your Git if you have one

```bash
git --version
```

## Downloading and Installing Git

If Git is not installed: 

- Download the installer from [https://git-scm.com/downloads](https://git-scm.com/downloads) 
- Run keeping all the default settings. 

:::{.callout-note collapse=false appearance='default' icon=true}
## If the Windows installer hangs with the progress bar at 100%:

 - Close the installer with Task Manager
 - Press <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Delete</kbd>;  
 - Select Task Manager;  
 - Find Git for Windows installer and close.
:::

## Setting up Git

The first step is to set up some configuration variables which helps git to keep track of contributor and contributors contribution.

To set up the basic changes we will run `git config` command.

```bash
# git config command
git config --global user.name "Your Name"
git config --global user.email "Your Email"
```

## Setting up Git

The global option makes sure that every project in that local machine will use that name and email address.

To see all the global configuration we can run the below command:

```bash
# displaying git global configuration command
git config --list
```

To see where the settings file are defined, we can run bellow command:

```bash
# displaying setting files location command
git config --list --show-origin
```

## Setting up Git

Once we set up the global variables, we will initialize the project. To do so, we have to go to that directory from the command line.

```bash
# changing directory command
cd folder/location
```

Once we are in the desired directory, we will initialize our project using `git init` or `git clone`

```bash
# Initialise a New Repo
git init
```

```bash
# Cloning an Existing Repo
git clone https://github.com/username/repository.git
```

## Setting up Git

It will create a `.git` file in the same directory and by default it's hidden. To see that, we need to type `ls -la` command on terminal.

`git init` or `git clone` commands initialize the project for us and make files that are necessary for keeping track of our changes. We can change the directory to see what files have been created by the `git init` or `git clone` commands.

```bash
cd .git
ls -la
```

It will display that git has created a several files to keep the tracks of our changes.

<!-- In VS Code, `git init` command will change the color of the files and it will show `U` beside the file names. `U` means **Untracked File** -->

<!-- ## Exercise 1, creating a git repository: -->

<!-- <br>- Navigate to a folder you want to work in, and create a new folder to contain your repository: -->

<!-- <div style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ cd your_dir -->
<!-- $ mkdir your_folder -->
<!-- $ cd your_folder -->
<!-- </code></pre> -->
<!-- </div> -->
<!-- Then initialise the folder -->
<!-- <div style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git init -->
<!-- </code></pre> -->
<!-- </div> -->
<!-- ::: {.callout-tip title=".git"} -->
<!-- A hidden ".git" folder has been created in your folder. This contains everything Git needs to work. -->
<!-- ::: -->


## Git Add

After initializing the git, we need to add the files in the staging environment with `git add` command. Staging is a temporary area that we can store files that we want to commit later.

```bash
# Basic command for adding Files
git add filename.extension # it adds single file at a time and it's a good
practices
# Alternative Options
git add --all # it adds all the file in the directory to the staging environment
git add -A # does the same thing as --all but it's a shortcut
git add . # same as --all and -A
```

<!-- after executing the `git add` command it  will change that file from `U` to `A` in the VS Code. `A` means Added. -->

## Git Commit

- You can think of a commit as a snapshot of your work at a particular time
- You can navigate between commits easily with git
- This allows you to switch easily between different versions of your work
- When you commit, rather than saving all the files in a project every time, git is efficient
and only stores the files which have been changed between the previous commit and your current one
- The commit also stores a reference to its parent commit

## Git Commit

This means that Git has four main states that your files can be in:

- **Untracked**: You've created a new file and not told git to keep track of it.
- **Modified**: You've changed a file that git already has a record of, but have not told
git to include these changes in your next commit.
We say these files are in the working tree.
- **Staged**: You've told git to include the file next time you do a commit.
We say these files are in the staging area.
- **Committed**: The file is saved in it's present state in the most recent commit.

## Git Commit

![](https://raw.githubusercontent.com/Cambridge-ICCS/Summer-school-Intro-Git/refs/heads/main/presentation/images/show_different_file_states.png)

<!-- ## Exercise 2a, create an untracked file: -->

<!-- ![](images/create_untracked_file.png) -->

<!-- ## Exercise 2a, create an untracked file: -->
<!-- <br>- Create a new file in your repository. -->

<!-- <div style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ touch new.txt -->
<!-- $ code new.txt -->
<!-- </code></pre> -->
<!-- </div> -->
<!-- <br> -->
<!-- Lets check what git can see... -->
<!-- <div style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git status -->
<!-- </code></pre> -->
<!-- </div> -->

<!-- ## Exercise 2b, add the untracked file to the staging area: -->

<!-- ![](images/add_to_staging_area.png) -->

<!-- ## Exercise 2b, add the untracked file to the staging area: -->

<!-- <br> Try these commands... -->
<!-- <div style="margin-top: 100px; background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git add . -->
<!-- </code></pre> -->
<!-- </div> -->
<!-- <div style="margin-top: 100px; background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git status -->
<!-- </code></pre> -->
<!-- </div> -->

## Git Commit

Last step is to commit the changes using the `git commit` command. 

```bash
# basic commit command
git commit -m "Commit Message"
# commit command with description along with commit Message
git commit -m "Commit Message" -m "Commit Description"
```

git commit message should be short and precise. What are the changes being made, why are the changes and the functionalities it will add.
git commit message should be like email subject. 

<!-- `git commit` command will remove the `A` tag beside the files names in VS Code. It means these files has been committed into your local machine. -->
<!-- Any changes made after this will flag the file as `M` tag. `M` means Modified. -->

<!-- ## Exercise 2c, commiting your changes: -->

<!-- ![](images/commit_to_repository.png) -->

<!-- ## Exercise 2c, commiting your changes: -->

<!-- Commit your file to the local git repo -->
<!-- <div style="margin-top: 0px; background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git commit -m "Created new.txt" -->
<!-- </code></pre> -->
<!-- </div> -->

<!-- <br> -->
<!-- 'git commit' >>>> tells git you want to commit -->
<!-- <br> -->
<!-- <br>'-m "Comment"' >>>> adds a description to the log for this commit. This is important as it tells you and others what the commit intent is. -->


<!-- ## git commit -->

<!-- <div style="margin-top: 100px; background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git commit -m "Created new.txt" -->

<!-- [main (root-commit) f22b25e] Created new.txt -->
<!--  1 file changed, 1 insertion(+) -->
<!--  create mode 100644 new.txt -->

<!-- </code></pre> -->
<!-- </div> -->

<!-- <div style="margin-top: 100px; background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"> -->
<!-- <pre><code> -->
<!-- $ git status -->

<!-- On branch main -->
<!-- nothing to commit, working tree clean -->

<!-- </code></pre> -->
<!-- </div> -->

## Working with remote repositories  

* `git clone`: creates a copy of the codebase on your local machine.
* `git push`: pushes changes back to the remote repository.
* `git pull`: pulls changes from the remote repository.

## Working with remote repositories  

![](https://raw.githubusercontent.com/DHI/datatalks/refs/heads/main/talk_16_git/images/git_staging.png)

## GitHub 

* Git repository hosting service
* Collaborate with others on codebase
* **Pull requests** for code review and merging changes
* **Issue tracking** and project management tools
* **GitHub Pages** for hosting websites

## Git and GitHub

Once your changes have been commited, it is time to send them to GitHub:

```bash
git push origin main
```

Be sure that your git project folder is connected to GitHub repository:  

```bash
git remote add origin https://github.com/username/repository.git
```

## Git and GitHub

If you want to update your project with the version hosted on github:

```bash
git pull origin master
```

This command pulls changes from the remote repository and merges them into your local branch.

This is useful when you are collaborating on a repository and working on different branches.


## Git Information

To verify git is keeping the track of our work we can use `git log` command.

```bash
# verifying command to check if git is keeping track 
git log
```

It will show the entries that has been made in the `.git` folder. It shows the commit hash, author name, date with timestamp, and commit message.

## Git Information

`git log` command shows us some information about the commits that has been made. I will use the output of our first commit.

```
git log
# Below is the output
commit 1b12ec3c6bc7dfc48fa33c3ae655564a02700162 (HEAD -> main) # commit hash, which is unique for every commit
Author: Shuvo Barman <user@users.noreply.github.com> # Name of the author and email
Date:   Sun Dec 17 16:32:29 2023 -0330 # detailed time of the commit

    Initial commit # commit message
```

the HEAD always point to the current branch in this case it's `main`

<!-- ## Git Environments -->

<!-- Git has 3 stages where we can move files. -->

<!-- 1. Working: Here the files looks like what they did during the last commit. -->
<!-- 2. Staging: Before we create a new commit, we can move our file to a temporary location called Staging. It gives us a queue up changes -->
<!-- until we are ready to commit. -->
<!-- 3. Commit: This is the final environment. In this stage, a new log entry is created with a new hash. -->

<!-- ## Git Environments -->

<!-- Before a commit a file can be in one of two main states. -->


<!-- 1. Tracked Files: These are the files that existed in the previous snapshot (another name for commit). -->
<!-- 2. Untracked Files: Untracked files are anything else. -->

<!-- ## Git Environments -->

<!-- Tracked files can be in different states -->

<!-- 1. Unmodified: Files haven't changed since the last commit. -->
<!-- 2. Modified: Files have changed since the last commit. -->
<!-- 3. Staged: Files that have been moved to staging environment. -->

## Git Environments

We can see this with `git status` viewing command.

```bash
# Viewing status command
git status
```

If a file goes into Modified Stage, we have two option for that file. One is adding that file using `git add` command
or we can restore it using `git restore` command.

```bash
# restoring file command
git restore FILENAME
# Alternative options
git restore . # restore all the files into it's previous state
git checkout . # older version of restore command
```

## Ignoring Files

Even if git is used to keep track of files but sometimes we don't want to keep track of all the files.

There could be several reasons behind it. Such as:

- Sensitive information(i.e. Password, Authentication tokens, API keys etc.)
- Personal notes(i.e. To-Do list for project)
- System files
- Large files

we can achieve this by creating a new file called `.gitignore`. Inside this file we can add any types of pattern, file name, folder name etc.
which will git ignore. Git doesn't track empty folders.

## Ignoring Files

we can also use global ignore file to ignoring files or pattern that we don't want git to upload.

```bash
# global git ignore command
git config --global core.excludesfile [file]
```

Clearing the cahce using below command.

```bash
# cache clearing command
git rm -r --cached .
```

## Deleting 

It can be done in two ways, from command line and another is doing manually from the IDE interface. we use `git rm` command to delete file.

```bash
# delete file command
git rm FILENAME
# force fully delete file 
git rm -f FILENAME
```

If we delete the file using `git rm` command, it deletes the file and moved that deletion automatically into staging. But if we do it manually from IDE interface we have do move that file from staging. 

## Deleting

After deleting a certain file using `git rm` command, if we want to restore the file we need to execute below command

```bash
# restoring deleted file command
git restore --staged FILENAME
# git restore -S FILENAME
```

after executing the above command we have to execute below command as well.

```bash
git restore FILENAME
```

## Renaming

This is a tricky part if we do it from the IDE interface manually. It will track two action: first deletion of certain file and second creating a new file. if we want to restore the manually renamed file using `git restore` command, git will keep both the 
files.

To do it from the command line we have to use `git mv` command

```bash
# file renaming command
git mv OLD_FILE_NAME NEW_FILE_NAME
```

To restore the renamed file to it's previous name, we can use the same command `git mv` with just changing the order of file names.

<!-- ## Git Difference -->

<!-- we use `git diff` command to see the changes we made across the files. If we made changes to a handful number of files then it's  -->
<!-- easier to use the IDE interface. -->

<!-- ```bash -->
<!-- # checking difference command -->
<!-- git diff -->
<!-- ``` -->

<!-- We can also compare files based on commit hash.  -->

<!-- ```bash -->
<!-- git diff COMMITHASH -->
<!-- ``` -->

<!-- ## Git Difference -->

<!-- We use `git log` to check the git history but if we don't want to see all the information, we can use `git log --oneline` command -->

<!-- ```bash -->
<!-- git log --oneline -->
<!-- ``` -->

<!-- It will show the commit hash and commit message as decending order. We can also the git commits as a graph, which makes it really helpful -->
<!-- when we have multiple branches. -->

<!-- ```bash -->
<!-- # git log as graph  -->
<!-- git log --all --decorate --oneline --graph  -->
<!-- # or -->
<!-- git log --oneline --all --graph -->
<!-- ``` -->

<!-- ## Using Git Amend -->

<!-- As we know git keeps track of all our changes, sometimes we end up with some commits that was not right. We can do another commit  -->
<!-- with proper changes but that will make the git history quiet messy. We can use `git amend` command to add changed files to the last -->
<!-- commit. -->

<!-- ```bash -->
<!-- # changing history command -->
<!-- git commit --amend -->
<!-- # Alternative options -->
<!-- git commit --amend -m "New Commit Message" -->
<!-- git commit --amend --no-edit -->
<!-- ``` -->

<!-- `git amend` command will launch the default editor and allow us to edit the file with the amended history. We can avoid that by using the second line -->
<!-- if we want to have a different commit message, it will change the commit message directly in the command line. We can also keep the commit message same as the last commit by executing the third command. -->

<!-- ## Using Git Reset -->

<!-- We can also do that, using `git reset` command. Resetting let us go back to a previous commit, and we have to give that commit hash in the command. -->

<!-- ```bash -->
<!-- # resetting command -->
<!-- git reset COMMIT_HASH -->
<!-- ``` -->

<!-- This will go back to that commit hash snapshot and point the head to that. But it will not delete the changes that we made in the files. -->
<!-- It will show those files as modified after getting back to that particular commit. If we want to discard all the changes we can use the -->
<!-- `git reset --hard` command, it will discard all the changes after that commit hash. But be careful as it's going to delete all the changes -->
<!-- along with commits. -->

<!-- ```bash -->
<!-- # hard reset command -->
<!-- git reset --hard COMMIT_HASH -->
<!-- ``` -->

<!-- ## Using Git Rebase -->

<!-- Rebasing is another way of changing history and it's designed to take the commits from one branch and apply them to another. -->

<!-- ```bash -->
<!-- # git rebasing command -->
<!-- git rebase <branch>/<commit> -->
<!-- # Alternative options -->
<!-- git rebase --interactive <branch>/<commit> # best way to use rebase -->
<!-- git rebase -i HEAD~# # useful when have a long commit history and only want to go back to certain steps -->
<!-- git rebase -i --root # bring all the history in ascending order and let us pick -->
<!-- ``` -->

## Branches

to see the brances we can use `git branch` command. It will show all the available branc in our project.

```bash
# checking git branch command
git branch
```

To create a new branch we will have to take a copy of a snapshot from another branch and start working from there. To do so, 

```bash
# copying a branch command
git switch -c NAME
# Alternative Option
git checkout -b NAME # older version of git switch
```

## Branches

`git merge` command will merge the changes from one branch into the current branch.

```bash
# merge command syntax
git merge <branch>
```

When we merge a feature into main branch, it's a good idea to delete that branch. To do that, we use below command

```bash
# git branch delete command syntax
git branch --delete NAME
# Alternative Option
git branch -d NAME # we can use this as long as branches have no conflicts
git branch -D NAME # ignore any conflicts, forcefully delete the branch
```

These sequence of doing things is also called git flow.

<!-- ## Git Flow -->

<!-- - Feature / Fix branch -->
<!-- - Make changes -->
<!-- - Merge changes to main branch -->
<!-- - Delete the feature / fix branch -->

<!-- ## Merge Conflicts -->

<!-- Conflicts happen when we try to merge two branches, but there are changes made in the file.  -->

<!-- ###  Git Stash -->

<!-- Stashing is a way of putting away code temporarily. We can do that via `git stash` command. -->

<!-- ```bash -->
<!-- # stashing command syntax -->
<!-- git stash -->
<!-- # Checking git stash command -->
<!-- git stash list # for checking what has been stored -->
<!-- git stash apply # apply a set of changes from stash -->
<!-- git stash pop # remove the git stash from the list -->
<!-- ``` -->

<!-- It's can be think of as a deck of cards, we can stash on top of another stash. -->

<!-- ## Merge Conflicts -->

<!-- ### Git Clean -->

<!-- remove all untracked files and directories from your branch super quicky. Nice way of removing files that we don't need anymore. -->

<!-- ```bash -->
<!-- # git clean command syntax -->
<!-- git clean -n # dry run -->
<!-- git clean -d # directories -->
<!-- git clean -f # force -->
<!-- ``` -->

<!-- We can combine these commands together as well, i.e. `git clean -dn` to remove both untracked file and directories -->

## Best practices

When working alone:

* Commit often
* Use descriptive commit messages
* Review code regularly
* Use .gitignore to exclude files
* Don't commit data (only very small test data)
* Don't commit passwords

When working with a team: 

* Keep pull requests small and focused
* Use "issues" to track work

## References

Huge thanks the following people who have generated and shared most of the content of this lecture:

- Zo√´ Turner: [Introduction to Git and GitHub Session - Prework for a computer](https://intro-git-github.nhsrcommunity.com/session-prework.html)

- Miguel Xochicale: [Introduction to git and GitHub](https://mxochicale.github.io/intro-to-git-and-github/)

- James Emberton, Amy Pike and Marion Weinzierl: [Git for beginners](https://github.com/Cambridge-ICCS/Summer-school-Intro-Git)

- Joe Wallwork and Tom Meltzer: [Intermediate Git and GitHub](https://hackmd.io/@jwallwork/2024-07-10-intermediate-git-tools?type=slide#/1)

<br>

```{r}
#| fig-align: "center"
knitr::include_graphics("https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdGdyMnhseGczY3NheHU1cHhtdGRzdWRxaXJ1Z3BsdWF6MWdwZm84ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3ohs7JG6cq7EWesFcQ/giphy.gif")
```

## {background="#43464B"}

```{css, echo = FALSE}
img.circle {border-radius:50%;}
```

::: {layout-ncol="2"}
<img class="circle" src="https://github.com/damien-dupre.png" />

**Thanks for your attention and don't hesitate to ask if you have any questions!**  
[`r fa(name = "mastodon")` @damien_dupre](https://datasci.social/@damien_dupre)  
[`r fa(name = "github")` @damien-dupre](https://github.com/damien-dupre)  
[`r fa(name = "link")` https://damien-dupre.github.io](https://damien-dupre.github.io)  
[`r fa(name = "paper-plane")` damien.dupre@dcu.ie](mailto:damien.dupre@dcu.ie)
:::