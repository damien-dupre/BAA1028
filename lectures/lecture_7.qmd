---
title: "Lecture 7: Customizing Quarto Websites"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupré
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
    code-overflow: wrap
    code-copy: true
    # code-line-numbers: false

title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
knitr: 
  opts_chunk:
    fig.align: center
    code-line-numbers: false
---

```{r setup, include = FALSE}
# libraries --------------------------------------------------------------------
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)
library(here)

# functions --------------------------------------------------------------------
include_img <- function(img_name) {
  paste0("https://raw.githubusercontent.com/damien-dupre/img/main/", img_name) |> 
  include_graphics()
}

# data -------------------------------------------------------------------------
# sass_variables <- read.csv(here("data/sass_variables.csv"))

# Glittr.org 
# https://jhudatascience.org/Adv_Reproducibility_in_Cancer_Informatics/
```

## Existing Quarto Websites

```{=html}
<iframe width="1000" height="500" src="https://damien-dupre.github.io/"></iframe>
```

- [`r fa(name = "globe")` https://damien-dupre.github.io/](https://damien-dupre.github.io/)
- [`r fa(name = "github")` https://github.com/damien-dupre/damien-dupre.github.io](https://github.com/damien-dupre/damien-dupre.github.io)

## Existing Quarto Websites

```{=html}
<iframe width="1000" height="500" src="https://samanthacsik.github.io/"></iframe>
```

- [`r fa(name = "globe")` https://samanthacsik.github.io/](https://samanthacsik.github.io/)
- [`r fa(name = "github")` https://github.com/samanthacsik/samanthacsik.github.io](https://github.com/samanthacsik/samanthacsik.github.io)

## Existing Quarto Websites

```{=html}
<iframe width="1000" height="500" src="https://robertmitchellv.com/"></iframe>
```

- [`r fa(name = "globe")` https://robertmitchellv.com/](https://robertmitchellv.com/)
- [`r fa(name = "github")` https://github.com/robertmitchellv/robertmitchellv.github.io](https://github.com/robertmitchellv/robertmitchellv.github.io)

## Existing Quarto Websites

```{=html}
<iframe width="1000" height="500" src="https://www.garrickadenbuie.com/"></iframe>
```

- [`r fa(name = "globe")` https://www.garrickadenbuie.com/](https://www.garrickadenbuie.com/)
- [`r fa(name = "github")` https://github.com/gadenbuie/garrickadenbuie-com](https://github.com/gadenbuie/garrickadenbuie-com)

## Existing Quarto Websites

```{=html}
<iframe width="1000" height="500" src="https://www.cwick.co.nz/"></iframe>
```

- [`r fa(name = "globe")` https://www.cwick.co.nz/](https://www.cwick.co.nz/)
- [`r fa(name = "github")` https://github.com/cwickham/cwick.co.nz](https://github.com/cwickham/cwick.co.nz)

## Requirement

You should already have a Quarto website (or at least the bones of one) that:

- is deployed using GitHub Pages **and**
- contains *some* content (e.g. text, headings, etc.) for us to customize

Beside these slides, have a look at the GitHub Repository ["Awesome Quarto"](https://github.com/mcanouil/awesome-quarto) for more support and examples.

::: {.footer}
**If you first need to get your website up and running, follow along with these [step-by-step instructions](https://damien-dupre.github.io/BAA1028/lectures/lecture_6#/title-slide) before moving forward.**
:::

## Quarto Website Default Design {.smaller}

When we **render** a new Quarto site, it **converts** all of our **markdown into HTML** and **applies a pre-built CSS stylesheet** (the Bootswatch [Cosmo theme](https://bootswatch.com/cosmo/)). 

[We can modify the appearance of our website in a number of ways:]{.body-text-m .teal-text}

::: {.incremental}
::: {.body-text-s}
- [**Editing the `index.qmd` YAML**]{.teal-text} -- you can apply a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) to give your landing page a sleek and professional appearance (we can further modify this later with some CSS).

- [**Editing the `_quarto.yml` file**]{.teal-text} -- this is our website configuration file,  where we can easily update our website's navigation (e.g. add new pages), add a page footer, a [favicon](https://en.wikipedia.org/wiki/Favicon), and much more. We can also switch the default theme to a different pre-built [Bootswatch theme](https://bootswatch.com/) (by replacing `cosmo` with an alternative theme name).

- [**Defining CSS rules in the `styles.css` file**]{.teal-text} that comes with every new Quarto site. This allows you to fine-tune the appearance of your site.

- [**Creating a `.scss` file(s)**]{.teal-text} that contains [Sass](https://sass-lang.com/) variables to quickly customize your website's theme -- these take the form of `$var-name: value;` and you can find a list of them in the [Quarto documentation](https://quarto.org/docs/output-formats/html-themes.html#sass-variables).

- Or...

:::
:::

## Quarto Website Default Design

Combine all of the above!

Approaching this in the following order worked best for me:

::: incremental
- [**First**]{.teal-text}, add a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) to `index.qmd` and adjust website configurations by editing `_quarto.yml` -- this is the easiest way to add some really cool features with minimal effort.

- [**Next**]{.teal-text}, create a `styles.scss` file, link to it in `_quarto.yml` (this applies your styles to your Quarto site), and define your Sass variables.

- [**Finally**]{.teal-text}, make fine-tuned adjustments by defining CSS rules directly in your `styles.scss` file (you can write CSS in `.scss` files, but not Sass in `.css` files).
:::

<!-- ## Quarto Website Default Design -->

<!-- Working on branches is recommended! -->

<!-- > I almost always work on a branch when making changes to my website -- this way I can safely test changes before deploying them to my live site. -->

<!-- To create a branch, first ensure that you're on `main` by typing either `git branch` or `git status` into the RStudio Terminal (either will tell you which branch you're currently on). If you're not on `main`, you can switch by running `git checkout main`. -->

<!-- ## Quarto Website Default Design -->

<!-- Create a local git branch from `main` by running the following in your Terminal: -->

<!-- ```{bash filename="Terminal"} -->
<!-- #| eval: false -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: false -->
<!-- git checkout -b my-new-branch -->
<!-- ``` -->

<!-- Push your new local branch to GitHub by running the following in your Terminal: -->

<!-- ```{bash filename="Terminal"} -->
<!-- #| eval: false -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: false -->
<!-- git push -u origin my-new-branch -->
<!-- ``` -->

<!-- You're now ready to work as normal! Once satisfied with your changes, you can `git add`, `git commit -m "my commit message"`, and `git push` (or use the RStudio GUI buttons in the **Git** tab) your files. Open a [pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) from GitHub and [merge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request) into `main` to integrate your changes. -->

## Preview your site for fast iteration

Run `quarto preview` in the VS Code Terminal to view changes in near real time – each time you edit and save your work, the preview will update in your browser.

```{r}
include_graphics("images/quarto-preview.gif")
```

Note: this is RStudio but it would be the same with VS Code

# Quarto Pre-Built Templates

## So you've created a Quarto website...

[Quarto](https://quarto.org/) gives us an easy-to-use web publishing format to create our personal websites, that we can develop in a space that is comfortable (VS Code) and write mostly Markdown syntax (which is rendered as HTML when we build our website). 

:::: {layout="[1,1]"}
::: {#first-column}
```{r}
include_graphics("images/jolla-template.png")
```
:::

::: {#second-column}
A massive benefit is that these websites already look pretty slick right out of the box.

This page is an example Quarto website styled using the built-in Bootswatch theme [Cosmo](https://bootswatch.com/cosmo/) and the `jolla` [layout template](https://quarto.org/docs/websites/website-about.html) applied.
:::
::::

##  Edit YAML

Adding a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) to `index.qmd` and adjusting website configurations by editing `_quarto.yml` is the easiest way to add some really cool features with minimal effort.

You can apply a template to any of your website's pages, though they are particularly awesome for creating a clean, professional-looking landing page.

##  Edit YAML

Quarto includes 5 built in templates, drawing inspiration from the [Postcards R Package](https://cran.r-project.org/web/packages/postcards/readme/README.html). Built-in templates include:

-   `jolla`
-   `trestles`
-   `solana`
-   `marquee`
-   `broadside`

Each template will position the about elements with the content in a different layout. Select the template using the `template` option:

``` yaml
---
about:
  template: trestles
---
```

##  Edit YAML

Here is a preview of each of the templates:

::: {.panel-tabset style="height: 4in;"}
### jolla

![](https://quarto.org/docs/websites/images/about-jolla.png){.border fig-alt="Screenshot of About page with jolla template. Photo is a centered circle above a heading with the author's name. There is a centered paragraph below the header, a separator line, and then buttons for twitter and github centered at the bottom."}

### trestles

![](https://quarto.org/docs/websites/images/about-trestles.png){.border fig-alt="Screenshot of About page with trestles template. On the left-hand side there is a rectangular photo above the author's name, and two buttons (one for twitter, and one for github below). On the right hand side there is a paragraph of body text followed by headered sections for Education and Experience."}

### solana

![](https://quarto.org/docs/websites/images/about-solana.png){.border fig-alt="Screenshot of About page with solana template. The left-hand side has the name as a main header with buttons for twitter and github below it. Below the buttons there is a paragraph of body text, followed by headered sections for Education and Experience. In the upper right-hand column there is a rectangular image."}

### marquee

![](https://quarto.org/docs/websites/images/about-marquee.png){.border fig-alt="Screenshot of About page with marquee template. A large square image is at the top. Beneath that the author's name is a header, and there is a paragraph of body text, followed by headered sections for Education and Experience. Centered at the bottom of the page are links to Twitter and GitHub with their respective icons next to them."}

### broadside

![](https://quarto.org/docs/websites/images/about-broadside.png){.border fig-alt="Screenshot of About page with broadside template. The left side is a rectangular image. On the right-hand side the author's name is a header, and there is a paragraph of body text, followed by headered sections for Education and Experience. Centered at the bottom of the page are links to Twitter and GitHub with their respective icons next to them."}
:::

##  Edit YAML

The image for the about page will be read from the document-level `image` option:

``` yaml
---
title: Finley Malloc
image: profile.jpg
about:
  template: jolla
---
```

## Edit YAML {.smaller}

In addition, you can customize how the image is displayed in the page to better meet your needs by setting the following options.

| option        | description                                                                           | templates                     |
|------------------|----------------------------------|--------------------|
| `image-width` | A valid CSS width for your image.                                                     | all                           |
| `image-shape` | The shape of the image on the about page. Choose from:`rectangle`, `round`, `rounded` | `jolla`, `solana`, `trestles` |
| `image-alt`   | Alternative text for image                                                            | all                           |
| `image-title` | Title for image                                                                       | all                           |

For example:

``` yaml
---
title: Finley Malloc
image: profile.png
about:
  template: trestles
  image-width: 10em
  image-shape: round
---
```

## Edit YAML {.smaller}

Your about page also may contain a set of links to other resources about you or your organization. 

Each template will render these links in a slightly different way. Here are the options that you can specify for each link:

| Option       | Description                                                                                                                        |
|-------------------|-----------------------------------------------------|
| `href`       | Link to file contained with the project or an external URL.                                                                        |
| `text`       | Text to display for navigation item (defaults to the document `title` if not provided).                                            |
| `icon`       | Name of one of the standard [Bootstrap 5 icons](https://icons.getbootstrap.com/) (e.g. "github", "twitter", "share", etc.).        |
| `aria-label` | [Accessible label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for the navigation item. |

## Add a landing page template

Here is an example:

:::: {.columns}
::: {.column width="47%"}
```{r}
#| out-width: "90%" 
include_graphics("images/no-about-page.png")
```

Without an About Page template

:::

::: {.column width="47%"}
```{r}
#| out-width: "92%" 
include_graphics("images/jolla-template-title.png")
```

`jolla` About Page template

:::
::::

## Add a landing page template

And the corresponding code

```{.yaml}
---
# title: "Samantha Csik" # optional (omitted in example screenshots)
image: file/path/to/headshot.jpeg # a great spot for your professional headshot :) 
toc: false # disable table of contents for this page (if applicable)
about: 
  template: jolla 
  image-shape: round
  image-width: 17em
  links: # create buttons
    - text: LinkedIn
      href: https://www.linkedin.com/in/samanthacsik/
      target: _blank # opens link in a new browser tab
    - text: GitHub
      href: https://github.com/samanthacsik
      target: _blank 
    - text: Email
      href: mailto:scsik@ucsb.edu
---
        
# ~ landing page content / text omitted for brevity ~        
```

## FontAwesome Icons

Add any free [FontAwesome icons](https://fontawesome.com/search?o=r&m=free) to your buttons using the `icon` option. For example:

:::: {layout="[1,1]"}
::: {#first-column}
```{r}
include_graphics("images/button-icons.png")
```
:::

::: {#second-column}
```{.yaml code-line-numbers=false}
---
# ~ additional YAML excluded for brevity ~
  links: 
    - icon: linkedin 
      text: LinkedIn
      href: https://www.linkedin.com/in/yourlinkedinname/
      target: _blank
---
```
:::
::::

Be sure to spell the icon name exactly as it appears on FontAwesome's website (e.g. the [LinkedIn icon](https://fontawesome.com/icons/linkedin?f=brands&s=solid), {{< fa brands linkedin >}}, is all lowercase and spelled, `linkedin`).

## Exercise 1: Quarto Template {background="#43464B"}

Use one of the templates (i.e., `jolla`, `trestles`, `solana`, `marquee`, or `broadside`) in a page of your website (i.e., `index.qmd`, `about.qmd`, or any other page).

Remember, you need to change the yaml of your page as follow:

``` yaml
---
image: relative/path/to/your/image.jpg
about:
  template: jolla
  links: # create buttons
    - icon: linkedin 
      text: LinkedIn
      href: https://www.linkedin.com/in/yourname/
---
```

```{r}
countdown(minutes = 10, warn_when = 60)
```

# Customise `_quarto.yml`

## Add / arrange pages

We can configure website navigation in `_quarto.yml`, including the type of navigation menu (`navbar`, `sidebar`), how pages are ordered, etc.

```{r}
include_graphics("images/update-navigation.png")
```

Here, the navbar items have been moved to the right side, link to a curriculum vitae (pdf), and also add a GitHub icon which links to a GitHub profile.

## Add / arrange pages {.smaller}

Make edits to a website's navigation bar under the `website` > `navbar` option:

```{.yaml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "Sam Csik"
  navbar:
    right: # accepts right/left/center; you can also place items individually on the left, right, and center
      - href: index.qmd
        text: Home
      - about.qmd
      - href: resources.qmd
        text: Resources
      - href: file/path/to/myCV.pdf # provide a relative file path to a pdf will open up a browser-based pdf viewer when clicked
        text: CV
        target: _blank # opens link (or page) in a new browser tab
      - icon: github # add icons as navbar buttons
        href: https://github.com/samanthacsik
        target: _blank

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
    page-layout: full
```

## Add page footer

Footers appear on each page (you may have to scroll to the bottom to see it appear). You can include a mix of text, icons, logos, hyperlinks, etc.

```{r}
include_graphics("images/page-footer.png")
```

## Add page footer  {.smaller}

Make edits to a website's footer under the `website` > `page-footer` option:

```{.yaml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "Sam Csik"
  navbar:
    right:
      - href: index.qmd
        text: Home
      - about.qmd
      - href: resources.qmd
        text: Resources
      - href: cv/myCV.pdf
        text: CV
        target: _blank 
      - icon: github 
        href: https://github.com/yourUserName
        target: _blank
  page-footer:
    background: light #or dark
    left: Copyright 2021, Samantha Csik
    right: This website is built with {{< fa heart title="a heart" >}}, [{{< fa brands github title="GitHub octocat logo" >}}](https://github.com/samanthacsik/samanthacsik.github.io){target=_blank}, [{{< fa brands r-project title="R Project" >}}](https://www.r-project.org/about.html){target=_blank} and [Quarto](https://quarto.org/){target=_blank}

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
    page-layout: full
```

## FontAwesome Extension

If you want to use FontAwesome icons anywhere else on your website (i.e. outside of the `icon` YAML option), you'll need to first install the Quarto [fontawesome extension](https://quarto-ext.github.io/fontawesome/).

Running the following in your Terminal will download and save the extension to a folder named `_extensions` in your repo's root directory.

Make sure you're in your project's root directory and don't forget to push this new folder (and its contents) to GitHub:

```{.bash filename="Terminal" code-line-numbers=false}
quarto add quarto-ext/fontawesome
```

**Note:** You'll need to install this extension for each new project where you'd like to use icons (e.g. if you create a different website).

## FontAwesome Shortcode

To embed an icon, look up the icon’s name on FontAwesome (be sure to only choose from the [Free icons]((https://fontawesome.com/search?o=r&m=free))), then use the fontawesome shortcode:

```{.markdown code-line-numbers=false}
{{{< fa icon-name >}}}
```

For example, the following shortcodes...

```{.markdown code-line-numbers=false}
{{{< fa face-smile >}}}
{{{< fa laptop >}}}
{{{< fa file-code >}}}
```

...will render as {{< fa face-smile title="A smiling face" >}}, {{< fa laptop title="An open laptop" >}}, {{< fa file-code title="A code file" >}}

## FontAwesome Brands

Some icons fall within the `brands` collection and must be prefixed with `brands` inside the shortcode. For example, the GitHub icon {{< fa brands github title="The GitHub octocat logo" >}}:

```{.markdown code-line-numbers=false}
{{{< fa brands github >}}}
```

You can identify if an icon falls within the `brands` collection by clicking on its preview (e.g. the [github icon](https://fontawesome.com/icons/github?f=brands&s=solid)) and checking to see if the HTML class is `fa-brands`:

```{r}
include_graphics("images/github-icon.png")
```

## Favicons and Logos

You can add a personal logo in the top left corner of your navbar in place of your title. The free [Adobe Express Logo Maker](https://www.adobe.com/express/create/logo) is a great tool for creating your own logo!

```{=html}
<iframe width="560" height="315" src="https://www.youtube.com/embed/IOTuG21S4k0" allowfullscreen></iframe>
```

**Tip:** Download your logo with a transparent background so that it can be placed anywhere on your site without having to deal with mismatched background colours. I also recommend making them as large as possible before downloading to mitigate the need for drastic resizing using CSS.

## Favicons and Logos

```{r}
include_graphics("images/logo-favicon.png")
```

## Favicons and Logos

A [favicon](https://en.wikipedia.org/wiki/Favicon) is a small icon used on web browsers to represent a website or a web page. Get creative and use a custom favicon that complements your personal logo.

1. Design Your Favicon to be simple and recognisable, as favicons are small (usually 16x16 or 32x32 pixels). Common formats include .ico, .png, and .svg.

2. Generate the Favicon using an online generator. Websites like <favicon.io> or <realfavicongenerator.net> allow you to upload an image and generate a .ico file and the necessary sizes for various devices.

3. Add the Favicon to Your Website

```{.yaml filename="_quarto.yml" code-line-numbers=false}
website:
  title: "Sam Csik"
  favicon: file/path/to/image.png
```

## Favicons and Logos {.smaller}

```{.yaml filename="_quarto.yml" code-overflow=wrap}
project:
  type: website
  output-dir: docs

website:
  title: "Sam Csik"
  favicon: file/path/to/image.png # NOTE: that the `favicon` is a `website` level option (not under `navbar`)
  navbar:
    title: false # override printing your website `title` (e.g. "Sam Csik" on line 6) in the top left corner of your navbar
    logo: file/path/to/logo.png
    right:
      - href: index.qmd
        text: Home
      - about.qmd
      - href: resources.qmd
        text: Resources
      - href: file/path/to/myCV.pdf
        text: CV
        target: _blank
      - icon: github
        href: https://github.com/samanthacsik
        target: _blank
  page-footer:
    background: light
    left: Copyright 2021, Samantha Csik
    right: This website is built with {{< fa heart title="a heart" >}}, [{{< fa brands github title="GitHub octocat logo" >}}](https://github.com/samanthacsik/samanthacsik.github.io){target=_blank}, [{{< fa brands r-project title="R Project" >}}](https://www.r-project.org/about.html){target=_blank} and [Quarto](https://quarto.org/){target=_blank}


format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
    page-layout: full
```

## Website Tools

Explore Quarto's [documentation](https://quarto.org/docs/websites/website-tools.html) to learn more about enabling [Google Analytics](https://analytics.google.com/), [Open Graph protocol](https://ogp.me/), and more.

```{r}
include_graphics("images/web-tools.png")
```

## Exercise 2: Favicons and Logos {background="#43464B"}

Create a logo and a favicon using [Adobe Express Logo Maker](https://www.adobe.com/express/create/logo) and [favicon.io](https://favicon.io/)/[realfavicongenerator.net](https://realfavicongenerator.net/)

Add them to your `_quarto.yml` using a relative path.

```{.yaml filename="_quarto.yml" code-line-numbers=false}
website:
  title: "Sam Csik"
  favicon: file/path/to/image.png 
  navbar:
    title: false
    logo: file/path/to/logo.png
```

```{r}
countdown(minutes = 10, warn_when = 60)
```

# HTML Theming

## Overview

HTML documents rendered with Quarto use Bootstrap 5 by default. This can be disabled or customized via the `theme` option:

```{.yaml filename="_quarto.yml" code-line-numbers=false}
theme: default # bootstrap 5 default
theme: cosmo   # cosmo bootswatch theme
theme: pandoc  # pandoc default html treatment
theme: none    # no theme css added to document
```

## Overview

Quarto includes 25 themes from the [Bootswatch](https://bootswatch.com/) project (for example, this website uses the [cosmo](https://bootswatch.com/cosmo/) theme). Available themes include:

> default, cerulean, cosmo, cyborg, darkly, flatly, journal, litera, lumen, lux, materia, minty, morph, pulse, quartz, sandstone, simplex, sketchy, slate, solar, spacelab, superhero, united, vapor, yeti, zephyr

Use of any of these themes via the `theme` option. For example:

```{.yaml filename="_quarto.yml" code-line-numbers=false}
format:
  html:
    theme: united
```

You can also customize these themes or create your own new themes.

## Basic Options

If you are using a Bootstrap theme or the Pandoc theme, there are a set of options you can provide in document metadata to customize its appearance. These include: 

> max-width, mainfont, fontsize, fontcolor, linkcolor, monofont, monobackgroundcolor, linestretch, backgroundcolor, margin-left, margin-right, margin-top, margin-bottom

See for details: [https://quarto.org/docs/output-formats/html-themes.html#basic-options](https://quarto.org/docs/output-formats/html-themes.html#basic-options)

## Basic Options

For example. here we set the font-size a bit larger and specify that we want a bit more space between lines of text:

``` yaml
title: "My Document"
format:
  html: 
    theme: cosmo
    fontsize: 1.1em
    linestretch: 1.7
```

## Dark Mode

In addition to providing a single theme for your html output, you may also provide a light and dark theme. For example:

``` yaml
theme:
  light: flatly
  dark: darkly
```

When providing both a dark and light mode for your html output, Quarto will automatically create a toggle to allow your reader to select the desired dark or light appearance.

## Dark Mode

Setting the above themes in your `_quarto.yml` results in both a dark and light version of your output being available. For example:

:::: {layout="[1,1]"}
::: {#first-column}
##### Flatly Themed Output

![](https://quarto.org/docs/output-formats/images/html-light.png){fig-alt="A screenshot of the header of the light version of this page showcasing the Flatly theme."}
:::

::: {#second-column}
##### Darkly Themed Output

![](https://quarto.org/docs/output-formats/images/html-dark.png){fig-alt="A screenshot of the header of the dark version of this page showcasing the Darkly theme."}
:::
::::

## Theme Options

You can do extensive customization of themes using [Sass](https://sass-lang.com/). Bootstrap defines over 1,400 Sass variables that control fonts, colors, padding, borders, and much more. You can see all of the variables here:

<https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss>

Sass theme files can define both variables that globally set things like colors and fonts, as well as rules that define more fine grained behavior. 

To customize an existing Bootstrap theme with your own set of variables and/or rules, just provide the base theme and then your custom theme file(s):

``` yaml
theme:
  - cosmo
  - custom.scss
```

## Theme Options

Your `custom.scss` file might look something like this:

``` css
/*-- scss:defaults --*/
$h2-font-size:          1.6rem !default;
$headings-font-weight:  500 !default;

/*-- scss:rules --*/
h1, h2, h3, h4, h5, h6 {
  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);
}
```

Note that the variables section is denoted by the `/*-- scss:defaults --*/` comment and the rules section (where normal CSS rules go) is denoted by the `/*-- scss:rules --*/` comment.


## Sass Variables

The following Sass Variables can be specified within SCSS files (note that these variables should always be prefixed with a `$` and are specified within theme files rather than within YAML options):

### Colors

+---------------+------------------------------------------------------------------------------------+
| Variable      | Notes                                                                              |
+===============+====================================================================================+
| `$body-bg`    | The page background color.                                                         |
+---------------+------------------------------------------------------------------------------------+
| `$body-color` | The page text color.                                                               |
+---------------+------------------------------------------------------------------------------------+
| `$link-color` | The link color.                                                                    |
+---------------+------------------------------------------------------------------------------------+
| `$input-bg`   | The background color for HTML inputs.                                              |
+---------------+------------------------------------------------------------------------------------+
| `$popover-bg` | The background color for popovers (for example, when a citation preview is shown). |
+---------------+------------------------------------------------------------------------------------+

### Fonts

+---------------------------+------------------------------------------+
| Variable                  | Notes                                    |
+===========================+==========================================+
| `$font-family-sans-serif` | The sans-serif font family for the page. |
+---------------------------+------------------------------------------+
| `$font-family-monospace`  | The monospace font family for the page.  |
+---------------------------+------------------------------------------+
| `$font-size-root`         | The base font size for the page.         |
+---------------------------+------------------------------------------+
| `$toc-font-size`          | The font size for the page TOC.          |
+---------------------------+------------------------------------------+
| `$h1-font-size`           | Font sizes for the specified headings.   |
|                           |                                          |
| `$h2-font-size`           |                                          |
|                           |                                          |
| `$h3-font-size`           |                                          |
|                           |                                          |
| `$h4-font-size`           |                                          |
|                           |                                          |
| `$h5-font-size`           |                                          |
+---------------------------+------------------------------------------+

### Code Blocks

+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Variable                        | Notes                                                                                                                                                            |
+=================================+==================================================================================================================================================================+
| `$code-block-border-left`       | By default, Quarto does not display a left border on code blocks. Set this variable to a truthy value or a CSS color to enable the left border.                  |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-border-left-style` | The style of the left border displayed on code blocks. Defaults to `solid`.                                                                                      |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-border-left-size`  | The thickness of the left border displayed on code blocks. Defaults to `3px`;                                                                                    |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-padding-left`      | The amount of padding applied between the code and the border. Defaults to `0.6em`.                                                                              |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-bg`                | By default, Quarto sets a background on code blocks by adding transparency to the theme's `progress-bg` color. Set this variable to truthy value or a CSS color. |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-bg-padding`        | The padding applied to the code block. Defaults to `0.4em`.                                                                                                      |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$code-block-bg-alpha`          | The amount to alter the transparency fo the `progress-bg` color. This is not used if an explicit background color is set. Defaults to `-0.35`.                   |
+---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

#### Code Annotation

You can customize the colors used to highlight lines when [code annotation](/docs/authoring/code-annotation.qmd) is used:

+-----------------------------------+---------------------------------------------------------------------------+
| Variable                          | Notes                                                                     |
+===================================+===========================================================================+
| `$code-annotation-higlight-color` | The color used as a border on highlighted lines.                          |
+-----------------------------------+---------------------------------------------------------------------------+
| `$code-annotation-higlight-bg`    | The color used for the background of highlighted lines.                   |
+-----------------------------------+---------------------------------------------------------------------------+

#### Code Copy

You can also customize the colors of the button which appears for `code-copy: true` with the following variables:

+-------------------------------+---------------------------------------------------------------------------+
| Variable                      | Notes                                                                     |
+===============================+===========================================================================+
| `$btn-code-copy-color`        | The color used for the copy button at the top right of code blocks.       |
+-------------------------------+---------------------------------------------------------------------------+
| `$btn-code-copy-color-active` | The hover color used for the copy button at the top right of code blocks. |
+-------------------------------+---------------------------------------------------------------------------+

### Inline Code

+---------------+-------------------------------------------------------------------------------------------------+
| Variable      | Notes                                                                                           |
+===============+=================================================================================================+
| `$code-bg`    | The background color of inline code. Defaults to a mix between the `body-bg` and `body-color`.  |
+---------------+-------------------------------------------------------------------------------------------------+
| `$code-color` | The text color of inline code. Defaults to a generated contrasting color against the `code-bg`. |
+---------------+-------------------------------------------------------------------------------------------------+

### Table of Contents

+-----------------------------------+------------------------------------------------------------------------+
| Variable                          | Notes                                                                  |
+===================================+========================================================================+
| `$toc-color`                      | The color for table of contents text.                                  |
+-----------------------------------+------------------------------------------------------------------------+
| `$toc-font-size`                  | The font-size for table of contents text.                              |
+-----------------------------------+------------------------------------------------------------------------+
| `$toc-active-border`              | The left border color for the currently active table of contents item. |
+-----------------------------------+------------------------------------------------------------------------+
| `$toc-inactive-border`            | The left border colors for inactive table of contents items.           |
+-----------------------------------+------------------------------------------------------------------------+

### Layout

+------------------------+---------------------------------------------------------------------------------------------------+
| Variable               | Notes                                                                                             |
+========================+===================================================================================================+
| `$content-padding-top` | Padding that should appear before the main content area (including the sidebar, content, and TOC. |
+------------------------+---------------------------------------------------------------------------------------------------+

### Navigation

+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Variable      | Notes                                                                                                                                                                       |
+===============+=============================================================================================================================================================================+
| `$navbar-bg`  | The background color of the navbar. Defaults to the theme's `$primary` color.                                                                                               |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$navbar-fg`  | The color of foreground elements (text and navigation) on the navbar. If not specified, a contrasting color is automatically computed.                                      |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$navbar-hl`  | The highlight color for links in the navbar. If not specified, the `$link-color` is used or a contrasting color is automatically computed.                                  |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$sidebar-bg` | The background color for a sidebar. Defaults to `$light` except when a navbar is present or when the style is `floating`. In that case it defaults to the `$body-bg` color. |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$sidebar-fg` | The color of foreground elements (text and navigation) on the sidebar. If not specified, a contrasting color is automatically computed.                                     |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$sidebar-hl` | The highlight color for links in the sidebar. If not specified, the `$link-color` is used.                                                                                  |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$footer-bg`  | The background color for the footer. Defaults to the `$body-bg` color.                                                                                                      |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$footer-fg`  | The color of foreground elements (text and navigation) on the footer. If not specified, a contrasting color is automatically computed.                                      |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

### Callouts

+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Variable                 | Notes                                                                                                                                                              |
+==========================+====================================================================================================================================================================+
| `$callout-border-width`  | The left border width of callouts. Defaults to `5px`.                                                                                                              |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$callout-border-scale`  | The border color of callouts computed by shifting the callout color by this amount. Defaults to `0%`.                                                              |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$callout-icon-scale`    | The color of the callout icon computed by shifting the callout color by this amount. Defaults to `10%`.                                                            |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$callout-margin-top`    | The amount of top margin on the callout. Defaults to `1.25rem`.                                                                                                    |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$callout-margin-bottom` | The amount of bottom margin on the callout. Defaults to `1.25rem`.                                                                                                 |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `$callout-color-<type>`  | The colors for the various types of callouts. Defaults:                                                                                                            |
|                          |                                                                                                                                                                    |
|                          | | type        | default   |                                                                                                                                        |
|                          | |-------------|-----------|                                                                                                                                        |
|                          | | `note`      | `$blue`   |                                                                                                                                        |
|                          | | `tip`       | `$green`  |                                                                                                                                        |
|                          | | `caution`   | `$orange` |                                                                                                                                        |
|                          | | `warning`   | `$yellow` |                                                                                                                                        |
|                          | | `important` | `$red`    |                                                                                                                                        |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

::: {.content-hidden unless-meta="is_dashboards"}

### Value Boxes

Use the `$valuebox-bg-<type>` variables to override the background color of value boxes that are set with `color: <type>`.

| Variable                     | Type                   |
|------------------------------|------------------------|
| `$valuebox-bg-primary`       |  `color: primary`      |
| `$valuebox-bg-secondary`     |  `color: secondary`    |
| `$valuebox-bg-success`       |  `color: success`      |
| `$valuebox-bg-info`          |  `color: info`         |
| `$valuebox-bg-warning`       |  `color: warning`      |
| `$valuebox-bg-danger`        |  `color: danger`       |
| `$valuebox-bg-light`         |  `color: light`        |
| `$valuebox-bg-dark`          |  `color: dark`         |

::: 

### Bootstrap Variables

In addition to the above Sass variables, Bootstrap itself supports hundreds of additional variables. You can [learn more about Bootstrap's use of Sass variables](https://getbootstrap.com/docs/5.1/customize/sass/) or review the [raw variables and their default values](https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss).

# Use Sass

## What is Sass?

:::: {layout="[1,1]"}
::: {#first-column}

```{r}
include_graphics("images/sass.png")
```

[**S**yntactically **A**wesome **S**tyle**s**heets](https://sass-lang.com/)
:::

::: {#second-column}
- Sass is a **CSS extension** (provides additional features, like variables)
- Sass is a **CSS preprocesser** (converts Sass code into standard CSS, which is a critical step because browsers can’t interpret Sass and can interpret CSS)
:::

::::

## Sass Reduces Repetition

Sass extends existing CSS features in a number of exciting ways, but importantly **reduces repetition**. 

For example, let’s say you’re building a website / web page that uses three colors:

```{r}
include_graphics("images/meds-colors.png")
```

You might imagine how often you'll need to type those HEX codes out as you developing your stylesheet...it can get annoying rather quickly.

## Sass Reduces Repetition

Or just look at my website:

```{.scss filename="Example stylesheet (.scss)"}
// Headings
$headings-color: #E84E0F !default;

// Text colour
$body-color: #2A2E46 !default;
$body-bg: #eeeeee !default;

// Navbar
$navbar-bg: #2A2E46  !default;
$navbar-fg: #eeeeee !default;

// hover on navbar
.navbar-expand-lg .navbar-nav .nav-link:hover {
  color: #E84E0F;
}
.navbar-expand-lg .navbar-nav .nav-link.active {
  color: #eeeeee;
}
```

## Define Sass Variables {.smaller}

Sass allows us to **define variables** (in the form `$var-name: value;`) for our colors, which we can reference instead of writing out their HEX codes each time. This makes your stylesheet **more readable and easier to update** (e.g. only need to update HEX codes in one spot, not multiple!).

```{.sass filename="Example stylesheet (.scss)"}
// define Sass vars 
$darkblue: #053660;
$teal: #147C91;
$darkgray: #333333;

// use vars in CSS rules (we'll learn more about how to write CSS soon!) 
h1 {
  font-color: $darkblue;
}

.button-styling {
  background: $teal;
  color: $darkblue; 
  border-color: $darkgray;
}
```

**Note:** Sass has two syntaxes – SCSS syntax (`.scss`), shown above, is the most common. It stands for **S**assy **C**ascading **S**tyle**s**heets and also the SASS syntax (`.sass`)

## Quarto compiles Sass automatically

Web browsers can interpret CSS ([{{< fa check >}}]{.teal-text} `.css`) but not Sass ([{{< fa xmark >}}]{.teal-text} `.scss` or `.sass`). 

. . . 

Typically, you’d need to **compile (i.e. convert) Sass to CSS**, then link the resulting `.css` file in your HTML.

. . . 


Lucky for us, **Quarto compiles the contents of a `.scss` file into CSS without any extra steps** -- all we need to do is link to a `.scss` file directly in our website's `_quarto.yml`. 

. . . 

Let's create our website's `.scss ` stylesheet.

(The following slides break this down into ~7 steps)


## Create .scss File

1. Create a `.scss` file in your repo's root directory using the `touch` command in the RStudio Terminal (alternatively, use **New Blank File** > **Text File** in the Files pane):

```{.bash filename="Terminal" code-line-numbers=false}
touch styles.scss # name it whatever you want
```

2. Add the `/*-- scss:defaults --*/` region decorator to the top of `styles.scss` ([required by Quarto](https://quarto.org/docs/output-formats/html-themes-more.html)) -- you'll write all your Sass variables underneath this.

```{.sass filename="styles.scss"}
/*-- scss:defaults --*/
```

Adding the region decorator as written above is ***critical!*** Quarto won't recognize your `.scss` file without it.

## Create .scss File

3. Apply your `styles.scss` file to your website using the `theme` option: 

```{yaml filename="_quarto.yml"}
#| eval: false
#| echo: true
#| code-line-numbers: "3"

format:
  html:
    theme: styles.scss
    toc: true
    page-layout: full
```

Note: I've also removed the `css: styles.css` option that was included by default, since I'll be writing all my sass and css in this single styles.scss file

## Define colors variables

4. I like to start by defining the colors I want to use throughout my site. For example:

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "3-9"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;
```

You can also define values with units, e.g. `$my-font-size: 25px;`.

**Note:** In `.scss` files, `//` denote single line comments. Multi-line comments start with `/*` and end at the next `*/`.

## Define Quarto Sass variables

5. Quarto provides a [list of pre-defined Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables), which control the appearance of various website elements and that can be specified within `.scss` files. We can **assign our newly-minted color variables *as values* to Quarto Sass variables** to easily update things like the background color, navbar & footer colors, hyperlink color, and more.

```{r}
include_graphics("images/quarto-sass-updates.png")
```

## Define Quarto Sass variable {.smaller}

Use the syntax `$quarto-var: $your-color-var;`.

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "11-25"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color
```

## Combining themes {.smaller}

You also *do not* need to create a theme entirely from scratch! If you like parts of a pre-built [Bootswatch theme](https://bootswatch.com/), you can modify it by layering on your desired updates using your own custom `styles.scss` file. 

For example, let's say I love everything about the pre-built [cosmo](https://bootswatch.com/cosmo/) theme, and only want to update the navbar background color to orange. My files might look something like this:  

:::: {layout="[1,1]"}
::: {#first-column}

```{.r filename="_quarto.yml"}
format:
  html:
    theme: 
      - cosmo
      - styles.scss
    toc: false
    page-layout: full
```

```{.sass filename="styles.scss"}
/*-- scss:defaults --*/

$orange: #ad7237;
$navbar-bg: $orange;
```
:::

::: {#second-column}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
include_graphics("images/orange-navbar.png")
```
:::
::::

Our resulting website, which is primarily themed using `cosmo`, but with a custom orange navbar.

## Explore Google fonts

[Fonts are just as important as color in expressing yourself and your brand -- you should *absolutely* be importing and using a different (more exciting) font family(ies) than the default.]{.body-text-m}

6a. Browse the *many* available Google fonts at <https://fonts.google.com/> and choose 1-3 fonts (two is, in my option, the sweet spot). Click on the **Filters** button in the top left corner of the page to help narrow your choices.

```{r}
include_graphics("images/google-fonts.png")
```

## Select Fonts 1 {.smaller}

6b. Select a Google font family by clicking the blue **Get Font** button in the top right corner of the page, which adds your font family to your “bag.” You can add as many font families to your bag as you’d like to import -- here, we select both [Nunito](https://fonts.google.com/specimen/Nunito?query=nunito) and [Sen](https://fonts.google.com/specimen/Sen?query=sen).

:::: {layout="[1,1]"}
::: {#first-column}
Explore the [Nunito font family](https://fonts.google.com/specimen/Nunito), which is available in a number of styles (i.e. different weights and italic):
```{r}
include_graphics("images/nunito.png")
```
:::

::: {#second-column}
View all of your selected font families and get your embed code from your shopping bag:
```{r}
include_graphics("images/font-bag.png")
```
:::
::::

**IMPORTANT: If you want to bold or italicize text, you need to select a font family that has those styles** (not all font families come in every style e.g. [Sen](https://fonts.google.com/specimen/Sen?query=sen) does not come in *italic*).

## Select Fonts 2

6c. Click **Get embed code**, then choose the **@import** radio button (beneath the **Web** menu option), which will provide your import code chunk. Copy everything between the `<style> </style>` tags (starting with `@import` and ending with `;`) to your clipboard.

```{r}
include_graphics("images/embed-code.png")
```

## Select Fonts 3

6d. Paste the import code into `styles.scss` (I always place this at the top of my stylesheet, beneath `/*-- scss:defaults --*/`).

```{r}
include_graphics("images/paste-import-code.png")
```

## Select Fonts (gif)

If you're like me, you might find a gif of the whole process helpful:

```{r}
include_graphics("images/import-google-fonts.gif")
```

## Import fonts {.smaller}
 
Your `styles.scss` should now similar to this:

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "3-4"
/*-- scss:defaults --*/

// Import Google fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color 
```

## Set mainfont {.smaller}

7. The easiest way to apply a main (i.e. default) font for all text elements on your website is in `_quarto.yml` using the `mainfont` option: 
 
:::: {layout="[1,1]"}
::: {#first-column}

```{.yaml filename="_quarto.yml"}
format:
  html:
    theme: styles.scss
    mainfont: Nunito
    toc: true
    page-layout: full
```
:::

::: {#second-column}

```{r}
include_graphics("images/mainfont.png")
```
:::
::::

All text elements on our website are now Nunito

## Apply other fonts?

Cool, but what about applying our second font, Sen?

Great question, and hang tight! This requires some CSS, which is the perfect segue into our next section.

## Apply other fonts?


**{{< fa angle-right >}}** If you plan to use multiple fonts, you can create Sass variables for each font type, then use those variables as you construct your CSS rules. For example, this slide deck uses three fonts (Sanchez, Montserrat, and Roboto Mono):

```{css}
#| eval: false
#| echo: true
// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Lato&family=Montserrat&family=Nunito+Sans:wght@200&family=Roboto+Mono:wght@300&family=Sanchez&display=swap');

// Fonts
$font-family-serif: 'Sanchez', serif;
$font-family-sans-serif: 'Montserrat', sans-serif;
$font-family-monospace: 'Roboto Mono', monospace;
```

**{{< fa angle-right >}}** You *must* import a higher font weight (e.g. 800), in addition to your standard "regular" weight, if you wish to **bold** text -- even bolding text using markdown syntax (e.g. `**this text is bold**`) will not work unless a higher font weight style is imported).

# CSS + Quarto

## Quarto comes with `styles.css`

A `styles.css` file is automatically generated when you create a new Quarto site

**We can write our CSS rules in `styles.css`, *but alternatively*, we can write them directly in our `styles.scss` file** *(remember, you can write CSS in a `.scss` file but you can't write Sass in a `.css` file)*. 

```{r}
include_graphics("images/quarto_files.png")
```

You can delete `styles.css` if you don't plan to use it, or leave it be (it won't impact your Quarto site since it's not linked as our stylesheet in `_quarto.yml`).

## SCSS rules divider

To start defining CSS rules in `styles.scss` you first need to add the `/*-- scss:rules --*/` region decorator beneath your Sass variables section (**this is important! your CSS won't be recognized without this region decorator in place**):

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "11"

/*-- scss:defaults --*/

// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Colors
$dark-green: #858E79;

// additional Sass variables omitted for brevity ~

/*-- scss:rules --*/
```

Next, we'll walk through some examples of how to modify your site with your own CSS rules.

## Determine element(s) to style

***Note:** I've added a bit more text to my page titled, "About," for demonstration purposes.*

Let's say I want to similarly style (add a bit of spacing between each letter, increase font weight) the following text on my website:

:::: {.columns}
::: {.column width="47%"}

```{r}
#| out-width: "50%" 
include_graphics("images/about-font.png")
```

On my About page, I want to style the page title, "About",  and each of the section headers

:::
::: {.column width="47%"}

```{r}
#| out-width: "50%" 
include_graphics("images/resources-font.png")
```

On my Resources page, I want to style the page title, "All of my favorite resources!"

:::
::::

## Don't know element?

But what if I don't know what HTML element type this is? Inspect!

Using the **Inspect** tool is a great way to get a better sense of how CSS is used to modify particular HTML elements (this works with any web page, and *also* your locally hosted website preview).


```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
include_graphics("images/inspect.gif")
```

## Don't know element?

In your website preview, **right click on an element of interest** (in this case, let's start with the page title, "About") and **choose Inspect** to pull up the underlying HTML & CSS files. You can continue to right click / inspect additional elements (e.g. the section header, "What I do for work").

Hovering your mouse over different lines of HTML highlights the corresponding element on your webpage.

## Inspect About & Resources page titles

The words "About" and "All my favorite resources!" are `<h1>` elements

*Only the screenshot for the "About" page shown here*

```{r}
include_graphics("images/inspect-about-resources.png")
```

**Note:** These `<h1>` elements also have a class `title`

## Inspect About page sections

Both section headers on the page titled, "About," are `<h2>` elements

*Only the screenshot for the section header that reads, "What I do for work," shown here*

```{r}
include_graphics("images/inspect-about-section-headers.png")
```

**Note:** These `<h2>` elements also have a class `anchored`.
:::

## Write a `<h1>` and `<h2>` grouping selector

```{.sass filename="styles.scss"}
/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800; // Google fonts tells you which weights your chosen font family allows for!
}
```

**Note:** We don't need to make any changes to the HTML (in `about.qmd` and `resources.qmd`) since this grouping selector targets *all* `<h1>` and `<h2>` elements across the site. If an element on any of the pages has either of those tags, it will get styled according to the declaration(s) included in our CSS rule.

## Preview grouping selector

Our updated `<h1>` and `<h2>` elements should now look something like this:

:::: {.columns}
::: {.column width="47%"}

```{r}
#| out-width: "80%" 
include_graphics("images/without-header-styling.png")
```

No CSS styling on `h1` and `h2` headers

:::
::: {.column width="47%"}

```{r}
#| out-width: "80%" 
include_graphics("images/with-header-styling.png")
```

With CSS styling on `h1` and `h2` headers

:::
::::

Check to see that our styles were also applied to our "Resources" page title.

## Predefined 'title' class

Recall those `.title` class selectors we noted earlier?

We noted that the page titles ("About" on the About page and "All my favorite resources!" on the Resources page), are all `<h1>` elements *and* are also given the class, `title` (e.g. `<h1> class="title">All of my favorite resources!</h1>`). This means that the Quarto framework has already defined a class selector called `.title` and applied that class to the above elements.

## Predefined 'title' class

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
include_graphics("images/title-class.png")
```

## Modify 'title' class

We can modify existing class (or ID) selectors

For example, let's make any text elements that are assigned the class, `.title`, the color maroon:

```{.sass filename="styles.scss"}
/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800; 
}

.title {
  color: maroon;
}
```

## Maroon titles

Check out your new maroon `title`s.

**It's important to note that we didn't need to make any changes to the HTML** (in `about.qmd`, and `resources.qmd`) since those `<h1>` elements are *already* assigned the class, `title`. Updates are automatically applied to any elements that the Quarto framework has already assigned as that class.

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
include_graphics("images/maroon-text.gif")
```

Similarly, you can modify the `.anchored` class that we saw was, by default, applied to our `<h2>` elements.

## Elements w/o title class

Can we apply the `title` class to other elements?

Yes! To demonstrate, let's write a couple of HTML elements that *are not by default* assigned the `title` class to see what happens -- in other words, let's apply the `title` class to some elements beyond just our website's landing page name and page titles. I'll do this on my **Resources** page (`resources.qmd`):

## Elements w/o title class

```{.qmd filename="resources.qmd"}
---
title: "All my favorite resources!"
---

<h1>this is an `<h1>` element</h1> # alternatively, you can write <h1> elements using markdown (`# this is an `<h1>` element`)

<h1 class="title">this is an `<h1>` element of class `title`</h1>

<p>this is a `<p>` element</p>

<p class="title">this is a `<p>` element of class `title`</p>
```

**Reminder:** Use the syntax, `<tag class="class-name">Content</tag>`, to apply a class selector to an HTML element. 

## Write some HTML on About page

Class selectors allow us to customize exactly how CSS rules apply to particular elements. In this example, only `<h1>` elements that are assigned the class, `title`, are colored maroon. Any `<h1>` elements that are not assigned the class, `title`, are styled according to our `h1, h2 {}` element selector.

```{r}
include_graphics("images/h1-title.png")
```

## Write some HTML on About page

**Note** that we can also apply the `title` class to *any* text element (not *just* `<h1>` elements). In this example, we apply it both to an `<h1>` element and a `<p>` element. *That said, giving your class selectors sensible names can help keep your code readable* -- the Quarto `.title` class is (most likely) intended for styling page titles.

## Write your own class selectors"}

Let's first create two different classes: one to center text on the page, and another to color text orange:

```{.sass filename="styles.scss"}
/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800;
}

.title {
  color: maroon;
}

.center-text {
  text-align: center;
}

.orange-text {
  color: $orange;
}
```

## Write HTML for Resources page {.smaller}

Add a few more elements in `resources.qmd` and apply our custom class selectors. **Remember,** unlike element selectors, **class selectors must be applied to the elements that we want to style** (i.e. we must update our HTML!)

```{.qmd filename="resources.qmd"}
---
title: "All my favorite resources!"
---
  
<h1>this is an `<h1>` element</h1> 

<h1 class="title">this is an `<h1>` element of class `title`</h1>

<p>this is a `<p>` element</p>

<p class="title">this is a `<p>` element of class `title`</p>
  
--- # three dashes is markdown syntax for creating a horizontal line across your page

<p class="orange-text">This paragraph is orange.</p>
  
<p class="center-text">This paragraph is centered.</p>
  
<p>This paragraph has no styling.</p>

<h2 class="center-text">This level-2 header is centered</h2>
```

## Oranged / centered text

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
include_graphics("images/orange-center.png")
```

## Apply two class selectors {.smaller}

Elements can have more than one class selector

Simply list the names of the class selectors one after the next inside `""` -- for example, `<tag class="class1 class2">Content</tag>`.

```{.qmd filename="resources.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "23-27"

---
title: "All my favorite resources!"
---
  
<h3 class="center-text orange-text">This level-3 header is both centered and orange</h2>
  
<p class="orange-text">**This paragraph is orange and bolded using markdown syntax (yes, you can combine markdown and html!).**</p>
```

## 2+ classes

(Yeah, okay this doesn't look that great, but I hope you can at least admire your use of CSS to style different HTML elements!)

```{r}
include_graphics("images/two-classes.png")
```

It's important to note that Quarto (currently) does not create a table of contents (TOC) on a page where header text is specified using HTML syntax (e.g. `<h1>`, `<h2>`, etc.). It *does* add a TOC when header text is specified using markdown syntax (e.g. `#`, `##`, etc.) so long as you have `toc: true`.

## Quarto Syntax

[Quarto also provides its [own syntax](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans) for applying classes to elements]{.slide-title3}

You can create both **divs (block-level regions of content)** and **spans (inline content)** using Quarto's syntax. For example:

:::: {.columns}
::: {.column width="47%"}

**Divs**

```{.md}
# Quarto syntax
::: {.my-selector}
Some element (e.g. text) to style
:::
  
# HTML syntax
<div class="my-selector">
  Some element (e.g. text) to style
</div>
```
:::
::: {.column width="47%"}

**Spans**

```{.md}
# Quarto syntax
Some text with just [this section]{.my-
selector} styled

# HTML syntax
<p>Some text with just <span class="my-
selector">this section</span> styled</p>
```
:::
::::

## Mix & match styles

You can mix and match syntaxes in `.qmd` files

An example:

```{.qmd filename="resources.qmd"}
---
title: "All my favorite resources!"
---

<p class="orange-text">Here is some orange text.</p>

<p>And here is some normal text beneath it.</p>

[Here is more orange text written using Quarto's syntax]{.orange-text}
```

Screenshot not included, but feel free to copy this content into your `resources.qmd` file to check out how it renders!

# A couple more styling tips

## More than 1 font family

Recall that we:

1. imported two font families from Google Fonts -- [Nunito](https://fonts.google.com/specimen/Nunito?query=nunito) and [Sen](https://fonts.google.com/specimen/Sen?query=sen) (though you can import and use as many as you'd like), and

2. set Nunito as our `mainfont` in `_quarto.yml` (which applies Nunito as the default font for all text elements). 

. . . 

To also apply Sen, we can:

1. create a Sass variable for Sen, then 

2. write a CSS rule(s) to apply Sen to our desired text elements.

##  font-family value

Look for the code chunk titled, **Sen: CSS class for a variable style** on the **Embed code** page. We'll want to grab the value specified after the **`font-family` property** (here, that value is, `"Sen", sans-serif;`). 

```{r}
include_graphics("images/sen-font-family.png")
```

## Create Sen Sass / CSS

Here, we create a CSS grouping selector, which applies Sen to any HTML header (`<h1>` - `<h6>`):

```{.sass filename="styles.scss"}
/*-- scss:defaults --*/

// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Fonts
$sen: "Sen", sans-serif;

/*-- scss:rules --*/

h1, h2, h3, h4, h5, h6 {
  font-family: $sen;
}

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800;
}

```

## Sen rendered

Sen is now applied to all of our website headers!

```{r}
include_graphics("images/rendered-sen.gif")
```

## Resize logo

Final touch: resize our logo

Let's add a CSS rule to increase the size of our logo. Be sure to add this rule beneath your `/*-- scss:rules --*/` region decorator, and note that you may need to adjust the `max-height` value to best suit your own personal logo:

```{.sass}
.navbar-brand img { 
  max-height: 40px;
  width: auto;
}
```

```{r}
include_graphics("images/large-logo.png")
```

## Adapting CSS from others

How did I figure that CSS rule out??

Great question! **I adapted it from someone else's open source code**, which was available on GitHub. This process often involves some trial and error, but it's one of the best ways to learn from the many awesome folks who openly share their work.

More specifically, I stumbled upon [Robert Mitchell's personal website](https://robertmitchellv.com/) (built with Quarto) and noticed that he too had a logo, *and* that it was perfectly sized to fit the navbar space:

```{r}
include_graphics("images/mitchell-website.png")
```

## Adapting CSS -- trial & error {.smaller}

Here's what that looked like: 

1. I inspected the logo using Google Chrome's [DevTools](https://developer.chrome.com/docs/devtools) (**right click** > **Inspect**).

2. DevTools opened to some HTML which linked to the logo PNG file and had the class `navbar-logo` (this seemed like a reasonable place to start).

3. I hopped over to Robert's [`custom.scss` file](https://github.com/robertmitchellv/robertmitchellv.github.io/blob/main/custom.scss) and searched for `navbar-logo`. This didn't yield any matches.

4. I returned to the DevTools pane and hovered over the HTML directly above my first attempt (hovering over this new HTML still highlighted the website logo, so I assumed it was targeting the right element). Here, I noticed the class `navbar-brand`.

5. I jumped back to the `custom.scss` file -- this time, a search for `navbar-brand` led me to the [CSS rule](https://github.com/robertmitchellv/robertmitchellv.github.io/blob/main/custom.scss#L215-L218) used to adjust the size of the logo.

6. (Not shown in gif) Finally, I tried copying this rule over to my own stylesheet to test it out (and hope that it actually works)! I had to tweak the max-height to work for *my* logo.

A gif of the process is shown on the next slide.

## Adapting CSS -- trial & error

```{r}
include_graphics("images/mitchell-logo.gif")
```

## References

Huge thanks the following people who have generated and shared most of the content of this lecture:

- Sam Csik: [Customizing Quarto Websites, Make your website stand out using SASS and CSS](https://ucsb-meds.github.io/customizing-quarto-websites)

<br>

```{r}
#| fig-align: "center"
include_graphics("https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdGdyMnhseGczY3NheHU1cHhtdGRzdWRxaXJ1Z3BsdWF6MWdwZm84ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3ohs7JG6cq7EWesFcQ/giphy.gif")
```

## {background="#43464B"}

```{css, echo = FALSE}
img.circle {border-radius:50%;}
```

::: {layout-ncol="2"}
<img class="circle" src="https://github.com/damien-dupre.png" />

**Thanks for your attention and don't hesitate to ask if you have any questions!**  
[`r fa(name = "mastodon")` @damien_dupre](https://datasci.social/@damien_dupre)  
[`r fa(name = "github")` @damien-dupre](https://github.com/damien-dupre)  
[`r fa(name = "link")` https://damien-dupre.github.io](https://damien-dupre.github.io)  
[`r fa(name = "paper-plane")` damien.dupre@dcu.ie](mailto:damien.dupre@dcu.ie)
:::




