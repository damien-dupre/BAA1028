---
title: "Lecture 2: HTML and CSS"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupré
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
---

```{r setup, include = FALSE}
# libraries --
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)

# functions --
include_img <- function(img_name) {
  paste0("https://raw.githubusercontent.com/damien-dupre/img/main/", img_name) |> 
  knitr::include_graphics()
}

# browseURL("https://ucsb-meds.github.io/customizing-quarto-websites/")
# browseURL("https://fania.github.io/uca-web-lec1/")
# browseURL("https://github.com/lamkeewei/html-slides")
# browseURL("https://github.com/ale66/learn-web")
# browseURL("https://github.com/ZoeLawson/mcc_tools_tech/tree/Winter2024")
# browseURL("https://websitesetup.org/html5-cheat-sheet/")
# browseURL("https://github.com/b2renger/Introduction_HTML-CSS-JS")

```

# How Websites Work?
      
## Back-end: “SERVER”
      
A **web server** handles your [DNS](https://en.wikipedia.org/wiki/Domain_Name_System) requests for a website, does background **processing** and **retrieval** (e.g. from databases), finds `.html`,`.css`, `.js` **files**, plus **images**, **fonts**, **audio** etc., then **serves** it all to your **browser** using [http](https://http.cat/).

## Front-end: “CLIENT”
      
A 'client'—usually a **web browser**—receives **files** from the server using using [http](https://http.cat/) and **displays** the pages you requested by rendering the **HTML**, applying **CSS** styles to the HTML **elements**, and reading (*parsing*) **JavaScript** code.

## Exercise 1: Observe your web browser in action

1. Open your web browser (Chrome, Firefox, Edge, ...)
2. Go to the URL [https://damien-dupre.github.io/](https://damien-dupre.github.io/)
3. In the menu of your web browser, find "Developer Tools" (Chrome), "Web Developer Tools" (Firefox), or equivalent
4. Click `Network` and Reload the page

See, all the documents downloaded to display the page!

```{r}
countdown(minutes = 3, warn_when = 60)
```

# Enter HTML and CSS

## HTML and CSS

In order to really fine-tune the appearance of our site, we need to dive a bit into the world of [HTML](https://html.spec.whatwg.org/) and [CSS](https://www.w3.org/Style/CSS/Overview.en.html).

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/html_css.png?raw=true")
```

## The building blocks of web pages

**HTML** (Hypertext Markup Language) is a *markup language*<sup>1</sup> that tells web browsers how to *structure* web pages. You can think of HTML as the *skeleton* of a web page. It gives authors the means to create elements like headings, text, tables, lists, add media, etc.

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/html.png?raw=true")
```

Source: Adapted from [Nicolas Karasiak](https://github.com/nkarasiak/Illustration)

<sup>1</sup>[**Markdown**](https://www.markdownguide.org/) is also a lightweight markup languages -- it is a bit easier for humans to write and read than HTML. HTML is more expressive and allows for customization that is difficult or impossible to do in Markdown.

## The building blocks of web pages

**CSS** (Cascading Style Sheets) is a programming language that allows you to control how HTML elements *look* on a web page. You can think of CSS as the *outfit* that is styling the skeleton. It allows authors to control aspects such as the colors, layout, and font style.

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/css.png?raw=true")
```

Source: Adapted from [Nicolas Karasiak](https://github.com/nkarasiak/Illustration)

## Browser Specific Internal Style Sheet

Your browser will style HTML documents using an internal style sheet, which ensures that headings are larger than normal text, links are highlighted, lists and tables are structured correctly, etc.

:::: {.columns}
::: {.column width="47%"}
```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/html-github.png?raw=true")
```
:::
::: {.column width="47%"}
```{r}


#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/browser-styling-github.png?raw=true")
```
:::
::::

## CSS adds style to web page renderings

CSS allows website developers to add additional styling to web browser defaults. Otherwise, websites would be pretty boring to look at (and they'd all generally look the same).

:::: {.columns}
::: {.column width="47%"}
```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/browser-styling-github.png?raw=true")
```
:::
::: {.column width="47%"}
```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/css-styling-github.png?raw=true")
```
:::
::::

# Light intro to HTML

## HTML Code
      
An **HTML5** document consists of 4 core elements:  
`doctype`, `html`, `head`, and `body`  
**All websites** have the following fundamental *structure*!

```html
<!doctype html>
<html>
  <head>
    <!-- some **information** the browser needs -->
  </head>
  <body>
    <!-- what actually **appears** in the browser -->
  </body>
</html>
```

## HTML Code

Content is between **matching pairs** of HTML tags:

```html
<header>The box at the top</header>

<h2>A heading element</h2>

<p>Some text in a paragraph</p>

<footer>The box at the bottom</footer>
```

## HTML Code

Some tags **don't need 'closing'** e.g. the `img` tag:

```html
<img src="imgs/my-lovely-horse.png" alt="nice horse">
```
The only other **'self-closing' tags** you might use are:

```html
<br> <!-- a line break -->

<input type="checkbox" name="horses">
<input type="radio" name="cats"> 
```

## HTML Code

A **hyperlink** goes to *another page*, a separate *website*,  
or can jump to a *specific section* on the same page,  
marked by an HTML `id` attribute:

```html
<a href="another-page.html">Go to another page</a>

<a href="http://xkcd.com">Go to another website</a>

<a href="#my_section">Jump to an ID on the page</a>

<section id="my_section">
  <p>The link above will jump to this section</p>
</section>
```

## HTML Code

⚠️ *IMPORTANT SLIDE !!*

most HTML tags are **nested inside** other HTML tags:
(watch your indentation!)

```html
<header>
  <h1>The main heading</h1>
</header>  

<section>
  <h2>A section heading</h2>
  <p>Some text in a paragraph</p>
</section>
```

## HTML Code

You can add **HTML comments** in your code:

```html
<!-- The figure tag is for image/captions boxes -->

<figure>
  <!-- The img tag goes here -->
  <!-- The figcaption tag goes here -->
</figure>
```

Text between `<!--` and `-->` won't show on screen.

My slides are using a Fira Font type, which makes the ligature between corresponding signs but `<!--` and `-->` are actually `< ! - - ` and `- - >` without the spaces.

##  HTML elements

[Elements](https://www.w3schools.com/html/html_elements.asp) comprise **start tags** and **end tags** that render some form of content in a particular way.

**The basic anatomy of an HTML element:**

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/html_element.png?raw=true")
```

## Commonly used HTML tags {.smaller}

Browse a complete [list of HTML tags](https://www.w3schools.com/tags/default.asp).

| Tag                 | What it does                                                 |
|---------------------|--------------------------------------------------------------|
| `<div></div>`       | defines a division or section in an HTML document            |
| `<h1></h1>`         | create a first-level heading (largest)                       |
| `<h6></h6>`         | create a sixth-level heading (smallest)                      |
| `<p></p>`           | begin a new paragraph                                        |
| `<strong></strong>` | bold text                                                    |
| `<em></em>`         | italicized text                                              |
| `<img></img>`       | present an image                                             |
| `<a></a>`           | define a hyperlink                                           |
| `<br>`              | add a line break (empty element)                             |
| `<span></span>`     | an inline container used to markup part of a text or document|

**Note:** Some HTML elements have no content (e.g. the `<br>`, or "break" element) -- these are called *empty* elements and do not have an end tag.

## Nested HTML elements

Remember to close out tags from the inside-out to avoid unexpected renderings.

**Nested HTML elements:**

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/nested_html_elements.png?raw=true")
```

**IMPORTANT: Take extra care to never skip (or incorrectly type) an end tag!**
Some elements will still display correctly if you forget an end tag, but you cannot rely on this. Forgotten end tags will cause you headaches as you try troubleshoot unexpected results and errors.

## HTML Cheat Sheet

<a href="https://websitesetup.org/wp-content/uploads/2019/08/HTML-CHEAT-SHEET.png" target="_blank" rel="noopener noreferrer"><img fetchpriority="high" decoding="async" class="shadow-2 aligncenter wp-image-11758 size-full" src="https://websitesetup.org/wp-content/uploads/2019/08/HTML-CHEAT-SHEET.png" alt="HTML Cheat Sheet" width="1024" height="11407" srcset="https://websitesetup.org/wp-content/uploads/2019/08/HTML-CHEAT-SHEET.png 1024w, https://websitesetup.org/wp-content/uploads/2019/08/HTML-CHEAT-SHEET-768x8555.png 768w, https://websitesetup.org/wp-content/uploads/2019/08/HTML-CHEAT-SHEET-92x1024.png 92w" sizes="(max-width: 1024px) 100vw, 1024px" /></a>If you spot any errors in this cheat sheet, please contact us &#8211; info@websitesetup.org

## Exercise 2: Modify an HTML File Localy

1. Download the Repository [https://github.com/damien-dupre/damien-dupre.github.io](https://github.com/damien-dupre/damien-dupre.github.io)
2. Find the file `about.html` in the `docs` folder
3. Modify this file to:
- Add a **h2 title with your name**
- Modify the **text with your own description**
- Replace the picture with **another image found on the web** (your picture or any other)

Then open this page on your web browser!

```{r}
countdown(minutes = 5, warn_when = 60)
```

# Light intro to CSS

## CSS Rules

CSS is a rule-based language, meaning that it allows you to **define groups of styles that should be applied to particular elements or groups of elements on a web page.** 

For example, *"I want all level one (`<h1>`) headings to be green text with a bit of extra space between each letter"* could be coded as:

## CSS Rules {.smaller}

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/CSS_syntax.png?raw=true")
```

- **Selectors**select the HTML element(s) you want to style *(e.g. level one headings, `<h1>`)*

- **Declarations** sit inside curly brackets, `{}`, and are made up of **[property](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)** and **[value](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units)** pairs. Each pair specifies the property of the HTML element(s) you're selecting *(e.g. the color property of the element `<h1>`)*, and a value you'd like to assign to that property *(e.g. green)*

- A property and its corresponding value are separated by a colon, `:`. Declarations end with a semicolon, `;`

## CSS Rules

A CSS **rule** inside `{}` can contain **multiple** CSS **declarations**:
      
```css
main {
  margin: 10px; /* 10 pixels all round */
  width: 80%; /* always 80% of the screen width */
  background: #eee;
  font-family: Tahoma, Helvetica, sans-serif;
}
```

or be on **one line** (*harder to read* when developing):

```css
main { margin: 0 auto; width: 50%; }
```
```css
main{margin:0 auto;width:50%;}input{background:yellow;width:100px;}
```

## Types of Selectors

There are many different CSS selector types, but the following will get you pretty far (though you can learn more about all the [different categories of CSS selectors here](https://www.w3schools.com/css/css_selectors.asp)).

- **Element selectors:** selects all HTML elements with the specified element name

- **Grouping selectors:** selects all HTML elements with the same style definitions

- **ID selectors:** uses the id attribute of an HTML element to select a specific element; id of an element is unique within a page, so the id selector is used to select one unique element

- **Class selectors:** selects HTML elements with a specific class attribute

- **Universal selector:** selects all HTML elements on the page

- **Inline styling:** (not a selector type, but an alternative way to apply CSS styling)

## Element selectors

Any HTML element can be used as a selector. The declarations specified apply to all HTML elements of that type.

:::: {.columns}
::: {.column width="30%"}

**CSS**

```{css}
#| eval: false
#| echo: true
h1 {
  color: green;
  letter-spacing: 5px;
}
```

:::
::: {.column width="63%"}

**HTML**

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will not be styled</h2>
<p>Neither will this paragaph</p>
<h1>But this second level one header will be</h1>
```

:::
::::

```{r}


#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/element_selector.png?raw=true")
```

## Grouping selectors

Group multiple element selectors together (separated by commas) if you want them all styled the same way.

:::: {.columns}
::: {.column width="30%"}

**CSS**

```{css}
#| eval: false
#| echo: true
h1, h2, p {
  text-align: center;
  color: purple;
}
```

:::
::: {.column width="63%"}

**HTML**

```html
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<h3>This level three header will not be styled</h3>
<p>This paragraph will be styled</p>
```

:::
::::

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/grouping_selector.png?raw=true")
```

## Class selectors

[Attributes](https://www.w3schools.com/html/html_attributes.asp) provide extra information about elements. They are always **specified in the start tag** and usually come in **value/name pairs** (e.g. `attributeName="attributeValue"`). We can use attributes (e.g. the **`class`** attribute) to apply **targeted styling** using class selectors.

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/html_attribute.png?raw=true")
```

## Class selectors {.smaller}

A class selector uses the *`class` attribute* of an HTML element to style that specific element. Class selectors are written using a `.` followed by the selector name, e.g. `.selector`. HTML elements can have more than one class, e.g. `<p class="class1 class2">`

**CSS**

```css
.blue-italicized {color: blue; font-style: italic;}
```

**HTML**

```html
<p class="blue-italicized">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
<p>We can use span tags to target <span class="blue-italicized">parts of an element</span> as well</p>
```


```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/class_selector.png?raw=true")
```

## Other selector types {.smaller}

::: {.panel-tabset}

### ID Selectors

An ID selector uses the *`id` attribute* of an HTML element to style that specific element. IDs must be unique within a page and therefore can only be used to select and style *one* unique element. ID selectors are written using a `#` followed by the selector name, e.g. `#selector`.

**CSS**

```css
#para1 {color: red; text-align: center;}
```

**HTML**

```html
#| echo: true
<p id="para1">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/id_selector.png?raw=true")
```

### Universal Selector

The universal selector selects *all* HTML elements on the page. It is written using only an asterisk, `*`.

**CSS**

```css
* {text-align: center; color: orange;}
```

**HTML**

```html
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<p>This paragaph will also be styled</p>
```

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/universal_selector.png?raw=true")
```

### Inline styling

You may define styles directly inline using the *`style` attribute*. However, it's best practice to use these sparingly as it mixes content (HTML) with presentation (CSS) and cannot be reused with other elements like defined CSS rules can.

**HTML with inline styling**

```html
<p>This is a normal paragraph</p>
<p style="color: red; font-style: italic;">This paragraph has inline styling</p>
<p>Here, only the word <span style="color: red; font-style: italic;">paragraph</span> is styled</p>
```

```{r}
#| fig-align: "center"
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/inline_styling.png?raw=true")
```
:::

## Other selector types

the **selector** is the element to be styled:

```css
main { /* targets tag main */
  margin: 0 auto;
}
aside.sidebar { /* targets tag aside with class sidebar */
  width: 50%;
}
form#myForm { /* targets tag form with id myForm */
  background: #666;
}
```

## Other selector types

⚠️ *IMPORTANT SLIDE !!*

**IDs** should always be *unique*! (CSS **#NameOfID**)

IDs are often used to identify things in JavaScript

**classes** can be applied to *multiple* tags (CSS **.NameofClass**)

Classes are often used to style similar things in CSS

## Conflicting CSS rules {.smaller}

It is often the case that more than one CSS rule will point to the same element. For example, say you have a style sheet and HTML that look like the following:

**CSS**

```css
* {color: orange;}
h1 {color: blue;}
.green-text {color: green;}
```

**HTML**

```html
<h1>This is my header</h1>
<p>This is my paragraph with <span style="green-text">some green text</span></p>
```

In this case, we have a universal selector that styles all of our text orange, but we also have an element selector that colors our `<h1>` elements blue and a class selector that is applied inline to color a subset of text green. *How do you know which style will be declared and applied to each of our HTML elements?*

## CSS Specificity

[Specificity](https://www.w3schools.com/css/css_specificity.asp) can be complicated (especially when you consider all the other types of selectors we haven't covered in these slides). For the purposes of this workshop and getting started on your CSS journeys, a general rule of thumb is as follows: Inline styles are the most specific and will override ID selectors, which will override class selectors, which will override element selectors, etc. The order that rules are written in your stylesheet matters as well -- since rules are read top to bottom, a directly competing rule farther down your stylesheet will take precedent.

## CSS Specificity

:::: {layout="[1,1]"}
::: {#first-column}

**Inline Styles**

<br>

**IDs**

<br>

**Class Selectors**

<br>

**Element Selectors**

<br>

**Universal Selectors**
:::

::: {#second-column}
```{r}
knitr::include_graphics("https://github.com/UCSB-MEDS/customizing-quarto-websites/blob/main/images/specificity_arrow.png?raw=true")
```
:::
::::

## CSS Stylesheet in HTML Code

the stylesheet needs to be linked in the `head` section

```html
<link rel="stylesheet" href="path/to/styles.css">
```

technically, it can go between `style` tags directly in the `head` section, but it should really go into an external file

```html
<style>
  body {
    background: beige;
  }
</style>
```

# Keep Your Code Tidy

## TIDY CODE
  
⚠️ *IMPORTANT SLIDE !!*

- **indent all your code** as you go, with **2 spaces**!
- **HTML** in `.html` files (`<`angle brackets`>`)
- **CSS** in `.css` files (`{`curly braces`}`)

### KEEPING **CODE TIDY** WILL HELP YOU **A LOT**

## TIDY FILES

⚠️ *IMPORTANT SLIDE !!*

- **YES** all file & folder names **lower-case**!
- **YES** all **resized images** in an `images` folder!
- **NO** *spaces* in filenames (incl. images etc.)!
- **NO** unused, old files in folder (e.g. photoshop files)!

### Clean up at the end of every session

## References

:::: {layout="[1,1]"}
::: {#first-column}
- [The birth of the Web](https://home.cern/topics/birth-web)

- [A history of HTML](https://www.w3.org/People/Raggett/book4/ch02.html)

- [A Brief History of CSS](http://www.css-class.com/a-brief-history-of-css/)

- [W3C CSS Syntax Module Level 3](https://www.w3.org/TR/css-syntax-3/)

- [Learn HTML](https://www.codecademy.com/learn/learn-html)

- [Learn CSS](https://www.codecademy.com/learn/learn-css)

- [Learn how to build websites](https://www.codecademy.com/learn/paths/learn-how-to-build-websites)

- [Introduction to JavaScript](https://www.codecademy.com/learn/introduction-to-javascript)
:::

::: {#second-column}
- [Introduction to HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML)

- [Introduction to CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS)

- [JavaScript basics](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics)

- [W3Schools HTML](http://www.w3schools.com/html/)

- [W3Schools CSS](http://www.w3schools.com/css/)

- [W3Schools Borders](https://www.w3schools.com/css/css_border.asp)

- [W3Schools: Position Property](https://www.w3schools.com/css/css_positioning.asp)

- [MDN: Positioning](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning)

:::
::::

## References

Huge thanks the following people who have generated and shared most of the content of this lecture:

- Fania Raczinski: [Web Design & Development](https://fania.github.io/uca-web-lec1/)

- Sam Csik: [Customizing Quarto Websites](https://ucsb-meds.github.io/customizing-quarto-websites/)

<br>

```{r}
#| fig-align: "center"
knitr::include_graphics("https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMjlzNHJxcXNsMjFoczM1cjVzMmw5MWo4aTFqNmx5c3UyNXQ2MzB5ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fxI1G5PNC5esyNlIUs/giphy.gif")
```

## Homework Exercise

1. Go to [https://html5up.net/](https://html5up.net/).

2. Download the template of your choice for free.

3. Fill the template with your informations and observe the changes on your local computer.

Notes:

- This exercise is mandatory for next lecture.
- This will not be accepted as a submission to the module's assignment but you will be able to use the content created in your future Quarto website.

## {background="#43464B"}

```{css, echo = FALSE}
img.circle {border-radius:50%;}
```

::: {layout-ncol="2"}
<img class="circle" src="https://github.com/damien-dupre.png" />

**Thanks for your attention and don't hesitate to ask if you have any questions!**  
[`r fa(name = "mastodon")` @damien_dupre](https://datasci.social/@damien_dupre)  
[`r fa(name = "github")` @damien-dupre](https://github.com/damien-dupre)  
[`r fa(name = "link")` https://damien-dupre.github.io](https://damien-dupre.github.io)  
[`r fa(name = "paper-plane")` damien.dupre@dcu.ie](mailto:damien.dupre@dcu.ie)
:::

