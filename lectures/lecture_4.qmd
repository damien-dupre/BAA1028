---
title: "Lecture 4: Publishing with GitHub Pages"
subtitle: BAA1028 - Workflow & Data Management 
author: Damien Dupr√©
format:
  revealjs:
    theme: [theme/metropolis.scss]
    toc-depth: 1
    chalkboard: false
    menu: true
    slide-number: true
title-slide-attributes:
    data-background-iframe: logo-fall/index.html
preload-iframes: true
---

```{r setup, include = FALSE}
# libraries --------------------------------------------------------------------
library(anicon)
library(countdown)
library(fontawesome)
library(knitr)

# functions --------------------------------------------------------------------
include_img <- function(img_name) {
  paste0("https://raw.githubusercontent.com/damien-dupre/img/main/", img_name) |> 
  knitr::include_graphics()
}
```

## For Today

### Requirements

#### 1. Find these slides at:

[https://damien-dupre.github.io/BAA1028/lecture_3](https://damien-dupre.github.io/BAA1028/lecture_3)

#### 2. Homework Exercise done

<br>

### Objectives

#### 1. Host your ePortfolio on GitHub

#### 2. Publish your ePortfolio with GitHub pages

<br>

### Any questions?

## Then, it's time to enter ...

```{r out.width='40%'}
include_img("the_matrix.gif")
```

# Host your Website on GitHub

## GitHub

#### GitHub has a lot of different functions. For now, we will only see how to use it to **published the html document output from our notebook file**.

```{r}
include_graphics("http://www.quickmeme.com/img/75/7509f68823389e4af3777ca6d3744c632cc32ab3547bc56e319126aa29ab149a.jpg")
```

## What is GitHub

### Primary used to collaborate on code development, it became multi-purpose:

- Version Control
- File and Code Storage
- Collaboration Projects
- Social Media for Developers
- Online Publication & Website Host
- Automatic Actions

### And even more that I am not aware of!

## What is GitHub

### Primary used to collaborate on code development, it became multi-purpose:

- Version Control
- **File and Code Storage**
- Collaboration
- Developers Social Media
- **Online Publication & Website Host**
- Automatic Actions

### And even more that I am not aware of!

## Your turn!

1/ Go to https://github.com and click **sign in** (or sign up if you haven't already done it)

`r faa("exclamation-triangle", animate="flash", speed="slow", color="red")` Note: Your user name will become extremely important in your future, `firstname-name` is usually good

```{r}
countdown(minutes = 2, warn_when = 60)
```

## Welcome to GitHub

```{r}
include_graphics("https://miro.medium.com/v2/resize:fit:1400/1*cgJlPulU9t3djbf9TQ5sGA.gif")
```

## How does GitHub Work?

#### The core principle of GitHub is a remote desktop (or profile) with a folder called **Repository** for each project you are working on or you worked on (also called "Repo" if you want to use the slang).

```{r}
include_img("github_dd_profile.png")
```

# Your turn!

Follow the steps here after to **create your first repository**.

## GitHub Repositories

[To create a Repository](https://docs.github.com/en/get-started/quickstart/create-a-repo):

1/ In the upper-right corner of any page, use the `+` drop-down menu, and select New repository.

```{r}
include_graphics("https://docs.github.com/assets/cb-11427/mw-1000/images/help/repository/repo-create.webp")
```

## GitHub Repositories

```{r}
include_graphics("https://git-scm.com/book/en/v2/images/newrepoform.png")
```

## GitHub Repositories

2/ **Type a short, memorable name** for your repository. For example, "hello-world".

```{r}
include_graphics("https://docs.github.com/assets/cb-61138/mw-1440/images/help/repository/create-repository-name.webp")
```

3/ **Optionally**, add a description of your repository. For example, "My first repository on GitHub." 

## GitHub Repositories

4/ **Choose a PUBLIC repository visibility**. For more information, see "About repositories." 

5/ Tick **Add a README file**.

6/ Click **Create repository**.

### Congratulations! You've successfully created your first repository, and initialized it with a README file.

```{r out.width='50%'}
include_graphics("https://external-preview.redd.it/H3X9ghkU1diDoEaB2j6OLakfRVvtelkI-VVCAMvpHFw.jpg?auto=webp&s=812777b2de31ed351475ecfb9cfe91a74931201b")
```

## Always Commit Changes

In GitHub, a commit is a saved change to a project's source code or other files. When you make changes to a file in a GitHub repository, you create a new version of that file. 

**A commit contains a snapshot of the changes** you've made to one or more files, along with a message that describes the changes. This **message should be descriptive and clear**, so that other developers can understand what changes you've made and why.

### Everytime you want to take into account a change in your repository, you need to commit these changes

## Your turn!

When you created your new repository, you initialized it with a README file. README files are a great place to describe your project in more detail, or add some documentation such as how to install or use your project. The contents of your README file are automatically shown on the front page of your repository.

**Follow the steps here after to commit a change to the README file.**

## Commit the First Change

1/ In your repository's list of files, **click README.md**. 

```{r out.width='50%'}
include_graphics("https://docs.github.com/assets/cb-21025/mw-1440/images/help/repository/create-commit-open-readme.webp")
```

## Commit the First Change

2/ In the upper right corner of the file view, **click the pen icon to open the file editor**.

```{r out.width='80%'}
include_graphics("https://docs.github.com/assets/cb-47677/mw-1440/images/help/repository/edit-file-edit-button.webp")
```

3/ In the text box, **type some information about the project**.

4/ Above the new content, click **Preview**.

```{r out.width='80%'}
include_graphics("https://docs.github.com/assets/cb-35443/mw-1440/images/help/repository/edit-readme-preview-changes.webp")
```

## Commit the First Change

5/ **Review the changes** you made to the file. You will see the new content in green.

6/ Click **Commit changes...**

7/ In the "Commit message" field, type a short, meaningful **commit message** that describes the change you made to the file. 

```{r}
include_graphics("https://docs.github.com/assets/cb-33561/mw-1000/images/help/repository/create-commit-review.webp")
```

8/ Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. Select **commit directly to the `main` branch** for now. 

`r faa("exclamation-triangle", animate="flash", speed="slow", color="red")` Warning: For collaborative projects never commit to the main branch

9/ Click **Propose file change**.

## Your turn!

1/ In your Repository Page in GitHub, Click `Add files` then on `Upload files`

2/ **Drop** or **choose** your html file in the main box and **commit your changes**

```{r}
countdown(minutes = 2, warn_when = 60)
```

## GitHub Pages

GitHub Pages is a **web hosting service** offered by GitHub that allows you to host static websites directly from a GitHub repository. This means you can use GitHub to store and version control your website's code, and then host it for free using GitHub Pages.

Your website will then be published at a URL based on your GitHub username and repository name (e.g., **username.github.io/repository**).

```{r out.width='50%'}
include_graphics("https://miro.medium.com/v2/resize:fit:1400/format:webp/1*uHia-SKJPkWqbxbGJPfCCA.jpeg")
```

## Your turn!

Turn on GitHub Pages for your project repository:

1/ Go to **Settings** and find **Pages** on the left pane

2/ In **Branch**, instead of None select **Main** and click **Save**

3/ Click on **Actions** and wait that "pages build and deployment" finishes. 

4/When it's done, go to **https://username.github.io/repository/nameofyourfile.html**
